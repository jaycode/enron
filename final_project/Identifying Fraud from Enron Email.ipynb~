{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "code_show=true; \n",
       "function code_toggle() {\n",
       "  if (code_show) {\n",
       "    $('div.input').each(function(id) {\n",
       "      el = $(this).find('.cm-variable:first');\n",
       "      if (id == 0 || el.text() == 'hide_me') {\n",
       "        $(this).hide();\n",
       "      }\n",
       "    });\n",
       "    $('div.output_prompt').css('opacity', 0);\n",
       "  } else {\n",
       "    $('div.input').each(function(id) {\n",
       "      $(this).show();\n",
       "    });\n",
       "    $('div.output_prompt').css('opacity', 1);\n",
       "  }\n",
       "  code_show = !code_show\n",
       "} \n",
       "$( document ).ready(code_toggle);\n",
       "</script>\n",
       "<form action=\"javascript:code_toggle()\"><input style=\"opacity:100\" type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is a cell to hide code snippets from displaying\n",
    "# This must be at first cell!\n",
    "\n",
    "from IPython.display import HTML\n",
    "\n",
    "hide_me = ''\n",
    "HTML('''<script>\n",
    "code_show=true; \n",
    "function code_toggle() {\n",
    "  if (code_show) {\n",
    "    $('div.input').each(function(id) {\n",
    "      el = $(this).find('.cm-variable:first');\n",
    "      if (id == 0 || el.text() == 'hide_me') {\n",
    "        $(this).hide();\n",
    "      }\n",
    "    });\n",
    "    $('div.output_prompt').css('opacity', 0);\n",
    "  } else {\n",
    "    $('div.input').each(function(id) {\n",
    "      $(this).show();\n",
    "    });\n",
    "    $('div.output_prompt').css('opacity', 1);\n",
    "  }\n",
    "  code_show = !code_show\n",
    "} \n",
    "$( document ).ready(code_toggle);\n",
    "</script>\n",
    "<form action=\"javascript:code_toggle()\"><input style=\"opacity:100\" type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hide_me\n",
    "\n",
    "#!/usr/bin/python\n",
    "\n",
    "import sys\n",
    "import cPickle\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "sys.path.append(\"../tools/\")\n",
    "\n",
    "from feature_format import featureFormat, targetFeatureSplit\n",
    "from tester import test_classifier, dump_classifier_and_data\n",
    "\n",
    "### Load the dictionary containing the dataset\n",
    "data_dict = cPickle.load(open(\"final_project_dataset.pkl\", \"r\") )\n",
    "\n",
    "# Preparing all features and data to test.\n",
    "\n",
    "features_to_test = ['poi',\n",
    "                    'bonus',\n",
    "                    'salary',\n",
    "                    'deferral_payments',\n",
    "                    'deferred_income',\n",
    "                    'director_fees',\n",
    "                    'exercised_stock_options',\n",
    "                    'expenses',\n",
    "                    'total_payments',\n",
    "                    'total_stock_value',\n",
    "                    'from_messages',\n",
    "                    'from_poi_to_this_person',\n",
    "                    'from_this_person_to_poi',\n",
    "                    'loan_advances',\n",
    "                    'long_term_incentive',\n",
    "                    'other',\n",
    "                    'restricted_stock',\n",
    "                    'restricted_stock_deferred',\n",
    "                    'salary',\n",
    "                    'shared_receipt_with_poi',\n",
    "                    'to_messages'\n",
    "                   ]\n",
    "data_to_test = featureFormat(data_dict, features_to_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hide_me\n",
    "### Export pandas to csv, for GGpairs analysis in R\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', 30)\n",
    "pd.set_option('display.width', None)\n",
    "pd.set_option('display.max_colwidth', 0)\n",
    "\n",
    "# We will use pandas many times in our project so turn this into a function:\n",
    "def to_pandas(data_dict):\n",
    "    df = pd.DataFrame(data_dict)\n",
    "    df = df.convert_objects(convert_numeric=True)\n",
    "    df = df.transpose()\n",
    "    df.reset_index(level=0, inplace=True)\n",
    "    # Renaming with df.rename(columns={'index': 'name'}) does not work\n",
    "    # pandas bug??\n",
    "    columns = list(df.columns)\n",
    "    columns[0] = 'name'\n",
    "    df.columns = columns\n",
    "    return(df)\n",
    "df = to_pandas(data_dict)\n",
    "df.to_csv('dataset.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Identifying Fraud from Enron Email\n",
    "## *A Udacity Nanodegree Project by Jay Wijaya*\n",
    "*8 Aug 2015*\n",
    "\n",
    "## Abstract\n",
    "This project attempts to predict the likelihood of someone being a suspect of Enron fraud conspiracy by looking at given dataset. We call the suspects Person of Interest (POI). The dataset contains insider pays to all Enron executives as well as emails sent through their company accounts, and their POI status.\n",
    "\n",
    "We use machine learning to learn the insider pays and emailing habits of POIs and non-POIs and see if we can find a pattern there, then use the classifier created to predict the likeliness of someone with a particular pattern of being a POI or not.\n",
    "\n",
    "## Data Exploration\n",
    "\n",
    "### Summary\n",
    "\n",
    "Following are the summary of our dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'name', u'bonus', u'deferral_payments', u'deferred_income',\n",
       "       u'director_fees', u'email_address', u'exercised_stock_options',\n",
       "       u'expenses', u'from_messages', u'from_poi_to_this_person',\n",
       "       u'from_this_person_to_poi', u'loan_advances', u'long_term_incentive',\n",
       "       u'other', u'poi', u'restricted_stock', u'restricted_stock_deferred',\n",
       "       u'salary', u'shared_receipt_with_poi', u'to_messages',\n",
       "       u'total_payments', u'total_stock_value'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "df.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be seen above there are three main set of features in our dataset:\n",
    "1. Insider pays like `bonus`, `salary`, `exercised_stock_options`, etc.\n",
    "2. Emailing habits:\n",
    "  - Number of emails sent: `from_messages`\n",
    "  - Number of emails received: `to_messages`\n",
    "  - Number of emails sent to POIs: `from_this_person_to_poi`\n",
    "  - Number of emails received from POIs: `from_poi_to_this_person`\n",
    "3. Our own features:\n",
    "  - Receipts shared with poi: `shared_receipt_with_poi`\n",
    "  - POI status as already known: `poi`\n",
    "  \n",
    "Here are some sample values from the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>bonus</th>\n",
       "      <th>deferral_payments</th>\n",
       "      <th>deferred_income</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>email_address</th>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <th>expenses</th>\n",
       "      <th>from_messages</th>\n",
       "      <th>from_poi_to_this_person</th>\n",
       "      <th>from_this_person_to_poi</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>long_term_incentive</th>\n",
       "      <th>other</th>\n",
       "      <th>poi</th>\n",
       "      <th>restricted_stock</th>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <th>salary</th>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <th>to_messages</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>total_stock_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALLEN PHILLIP K</td>\n",
       "      <td>4175000</td>\n",
       "      <td>2869717</td>\n",
       "      <td>-3081055</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1729541</td>\n",
       "      <td>13868</td>\n",
       "      <td>2195</td>\n",
       "      <td>47</td>\n",
       "      <td>65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>304805</td>\n",
       "      <td>152</td>\n",
       "      <td>0</td>\n",
       "      <td>126027</td>\n",
       "      <td>-126027</td>\n",
       "      <td>201955</td>\n",
       "      <td>1407</td>\n",
       "      <td>2902</td>\n",
       "      <td>4484442</td>\n",
       "      <td>1729541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BADUM JAMES P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>178980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>257817</td>\n",
       "      <td>3486</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>182466</td>\n",
       "      <td>257817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BANNANTINE JAMES M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-5104</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4046157</td>\n",
       "      <td>56301</td>\n",
       "      <td>29</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>864523</td>\n",
       "      <td>0</td>\n",
       "      <td>1757552</td>\n",
       "      <td>-560222</td>\n",
       "      <td>477</td>\n",
       "      <td>465</td>\n",
       "      <td>566</td>\n",
       "      <td>916197</td>\n",
       "      <td>5243487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BAXTER JOHN C</td>\n",
       "      <td>1200000</td>\n",
       "      <td>1295738</td>\n",
       "      <td>-1386055</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6680544</td>\n",
       "      <td>11200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1586055</td>\n",
       "      <td>2660303</td>\n",
       "      <td>0</td>\n",
       "      <td>3942714</td>\n",
       "      <td>NaN</td>\n",
       "      <td>267102</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5634343</td>\n",
       "      <td>10623258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BAY FRANKLIN R</td>\n",
       "      <td>400000</td>\n",
       "      <td>260455</td>\n",
       "      <td>-201641</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>129142</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>69</td>\n",
       "      <td>0</td>\n",
       "      <td>145796</td>\n",
       "      <td>-82782</td>\n",
       "      <td>239671</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>827696</td>\n",
       "      <td>63014</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 name    bonus  deferral_payments  deferred_income  \\\n",
       "0  ALLEN PHILLIP K     4175000  2869717           -3081055           \n",
       "1  BADUM JAMES P      NaN       178980            NaN                \n",
       "2  BANNANTINE JAMES M NaN      NaN                -5104              \n",
       "3  BAXTER JOHN C       1200000  1295738           -1386055           \n",
       "4  BAY FRANKLIN R      400000   260455            -201641            \n",
       "\n",
       "   director_fees  email_address  exercised_stock_options  expenses  \\\n",
       "0 NaN            NaN             1729541                  13868      \n",
       "1 NaN            NaN             257817                   3486       \n",
       "2 NaN            NaN             4046157                  56301      \n",
       "3 NaN            NaN             6680544                  11200      \n",
       "4 NaN            NaN            NaN                       129142     \n",
       "\n",
       "   from_messages  from_poi_to_this_person  from_this_person_to_poi  \\\n",
       "0  2195           47                       65                        \n",
       "1 NaN            NaN                      NaN                        \n",
       "2  29             39                       0                         \n",
       "3 NaN            NaN                      NaN                        \n",
       "4 NaN            NaN                      NaN                        \n",
       "\n",
       "   loan_advances  long_term_incentive    other  poi  restricted_stock  \\\n",
       "0 NaN             304805               152      0    126027             \n",
       "1 NaN            NaN                  NaN       0   NaN                 \n",
       "2 NaN            NaN                   864523   0    1757552            \n",
       "3 NaN             1586055              2660303  0    3942714            \n",
       "4 NaN            NaN                   69       0    145796             \n",
       "\n",
       "   restricted_stock_deferred  salary  shared_receipt_with_poi  to_messages  \\\n",
       "0 -126027                     201955  1407                     2902          \n",
       "1 NaN                        NaN     NaN                      NaN            \n",
       "2 -560222                     477     465                      566           \n",
       "3 NaN                         267102 NaN                      NaN            \n",
       "4 -82782                      239671 NaN                      NaN            \n",
       "\n",
       "   total_payments  total_stock_value  \n",
       "0  4484442         1729541            \n",
       "1  182466          257817             \n",
       "2  916197          5243487            \n",
       "3  5634343         10623258           \n",
       "4  827696          63014              "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "heads = df.head(5)\n",
    "heads"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can roughly tell from the above the type of each feature.\n",
    "\n",
    "How complete is our data? Let's make some quick summary below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of features:  22 \n",
      "\n",
      "     len\n",
      "poi     \n",
      "0    128\n",
      "1    18 \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>bonus</th>\n",
       "      <th>salary</th>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>to_messages</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>poi</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2446776.348485</td>\n",
       "      <td>601152.500000</td>\n",
       "      <td>5390155.122222</td>\n",
       "      <td>1058.527778</td>\n",
       "      <td>28775000</td>\n",
       "      <td>2007.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2074999.937500</td>\n",
       "      <td>383444.882353</td>\n",
       "      <td>10463793.666667</td>\n",
       "      <td>1783.000000</td>\n",
       "      <td>81525000</td>\n",
       "      <td>2417.142857</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              bonus         salary exercised_stock_options  \\\n",
       "               mean           mean                    mean   \n",
       "poi                                                          \n",
       "0    2446776.348485  601152.500000  5390155.122222           \n",
       "1    2074999.937500  383444.882353  10463793.666667          \n",
       "\n",
       "    shared_receipt_with_poi loan_advances  to_messages  \n",
       "                       mean          mean         mean  \n",
       "poi                                                     \n",
       "0    1058.527778             28775000      2007.111111  \n",
       "1    1783.000000             81525000      2417.142857  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "bypoi = df.groupby(['poi'])\n",
    "print \"number of features: \", len(df.keys()), \"\\n\"\n",
    "print bypoi['poi'].agg([len])\n",
    "bypoi['bonus',\n",
    "    'salary',\n",
    "    'exercised_stock_options',\n",
    "    'shared_receipt_with_poi',\n",
    "    'loan_advances',\n",
    "    'to_messages'].agg([np.mean])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bonus</th>\n",
       "      <td>82</td>\n",
       "      <td>2374234.609756</td>\n",
       "      <td>10713327.969046</td>\n",
       "      <td>70000</td>\n",
       "      <td>431250.00</td>\n",
       "      <td>769375.0</td>\n",
       "      <td>1200000.00</td>\n",
       "      <td>97343619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>deferral_payments</th>\n",
       "      <td>39</td>\n",
       "      <td>1642674.153846</td>\n",
       "      <td>5161929.973575</td>\n",
       "      <td>-102500</td>\n",
       "      <td>81573.00</td>\n",
       "      <td>227449.0</td>\n",
       "      <td>1002671.50</td>\n",
       "      <td>32083396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>deferred_income</th>\n",
       "      <td>49</td>\n",
       "      <td>-1140475.142857</td>\n",
       "      <td>4025406.378506</td>\n",
       "      <td>-27992891</td>\n",
       "      <td>-694862.00</td>\n",
       "      <td>-159792.0</td>\n",
       "      <td>-38346.00</td>\n",
       "      <td>-833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director_fees</th>\n",
       "      <td>17</td>\n",
       "      <td>166804.882353</td>\n",
       "      <td>319891.409747</td>\n",
       "      <td>3285</td>\n",
       "      <td>98784.00</td>\n",
       "      <td>108579.0</td>\n",
       "      <td>113784.00</td>\n",
       "      <td>1398517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>email_address</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <td>102</td>\n",
       "      <td>5987053.774510</td>\n",
       "      <td>31062006.568836</td>\n",
       "      <td>3285</td>\n",
       "      <td>527886.25</td>\n",
       "      <td>1310813.5</td>\n",
       "      <td>2547724.00</td>\n",
       "      <td>311764000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>expenses</th>\n",
       "      <td>95</td>\n",
       "      <td>108728.915789</td>\n",
       "      <td>533534.814109</td>\n",
       "      <td>148</td>\n",
       "      <td>22614.00</td>\n",
       "      <td>46950.0</td>\n",
       "      <td>79952.50</td>\n",
       "      <td>5235198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>from_messages</th>\n",
       "      <td>86</td>\n",
       "      <td>608.790698</td>\n",
       "      <td>1841.033949</td>\n",
       "      <td>12</td>\n",
       "      <td>22.75</td>\n",
       "      <td>41.0</td>\n",
       "      <td>145.50</td>\n",
       "      <td>14368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>from_poi_to_this_person</th>\n",
       "      <td>86</td>\n",
       "      <td>64.895349</td>\n",
       "      <td>86.979244</td>\n",
       "      <td>0</td>\n",
       "      <td>10.00</td>\n",
       "      <td>35.0</td>\n",
       "      <td>72.25</td>\n",
       "      <td>528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>from_this_person_to_poi</th>\n",
       "      <td>86</td>\n",
       "      <td>41.232558</td>\n",
       "      <td>100.073111</td>\n",
       "      <td>0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.0</td>\n",
       "      <td>24.75</td>\n",
       "      <td>609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_advances</th>\n",
       "      <td>4</td>\n",
       "      <td>41962500.000000</td>\n",
       "      <td>47083208.701900</td>\n",
       "      <td>400000</td>\n",
       "      <td>1600000.00</td>\n",
       "      <td>41762500.0</td>\n",
       "      <td>82125000.00</td>\n",
       "      <td>83925000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>long_term_incentive</th>\n",
       "      <td>66</td>\n",
       "      <td>1470361.454545</td>\n",
       "      <td>5942759.315498</td>\n",
       "      <td>69223</td>\n",
       "      <td>281250.00</td>\n",
       "      <td>442035.0</td>\n",
       "      <td>938672.00</td>\n",
       "      <td>48521928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>other</th>\n",
       "      <td>93</td>\n",
       "      <td>919064.967742</td>\n",
       "      <td>4589252.907638</td>\n",
       "      <td>2</td>\n",
       "      <td>1215.00</td>\n",
       "      <td>52382.0</td>\n",
       "      <td>362096.00</td>\n",
       "      <td>42667589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>poi</th>\n",
       "      <td>146</td>\n",
       "      <td>0.123288</td>\n",
       "      <td>0.329899</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restricted_stock</th>\n",
       "      <td>110</td>\n",
       "      <td>2321741.136364</td>\n",
       "      <td>12518278.177383</td>\n",
       "      <td>-2604490</td>\n",
       "      <td>254018.00</td>\n",
       "      <td>451740.0</td>\n",
       "      <td>1002369.75</td>\n",
       "      <td>130322299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <td>18</td>\n",
       "      <td>166410.555556</td>\n",
       "      <td>4201494.314703</td>\n",
       "      <td>-7576788</td>\n",
       "      <td>-389621.75</td>\n",
       "      <td>-146975.0</td>\n",
       "      <td>-75009.75</td>\n",
       "      <td>15456290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>salary</th>\n",
       "      <td>95</td>\n",
       "      <td>562194.294737</td>\n",
       "      <td>2716369.154553</td>\n",
       "      <td>477</td>\n",
       "      <td>211816.00</td>\n",
       "      <td>259996.0</td>\n",
       "      <td>312117.00</td>\n",
       "      <td>26704229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <td>86</td>\n",
       "      <td>1176.465116</td>\n",
       "      <td>1178.317641</td>\n",
       "      <td>2</td>\n",
       "      <td>249.75</td>\n",
       "      <td>740.5</td>\n",
       "      <td>1888.25</td>\n",
       "      <td>5521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>to_messages</th>\n",
       "      <td>86</td>\n",
       "      <td>2073.860465</td>\n",
       "      <td>2582.700981</td>\n",
       "      <td>57</td>\n",
       "      <td>541.25</td>\n",
       "      <td>1211.0</td>\n",
       "      <td>2634.75</td>\n",
       "      <td>15149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_payments</th>\n",
       "      <td>125</td>\n",
       "      <td>5081526.488000</td>\n",
       "      <td>29061716.401161</td>\n",
       "      <td>148</td>\n",
       "      <td>394475.00</td>\n",
       "      <td>1101393.0</td>\n",
       "      <td>2093263.00</td>\n",
       "      <td>309886585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_stock_value</th>\n",
       "      <td>126</td>\n",
       "      <td>6773957.452381</td>\n",
       "      <td>38957772.732279</td>\n",
       "      <td>-44093</td>\n",
       "      <td>494510.25</td>\n",
       "      <td>1102872.5</td>\n",
       "      <td>2949846.75</td>\n",
       "      <td>434509511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           count             mean              std       min  \\\n",
       "bonus                      82     2374234.609756   10713327.969046  70000      \n",
       "deferral_payments          39     1642674.153846   5161929.973575  -102500     \n",
       "deferred_income            49    -1140475.142857   4025406.378506  -27992891   \n",
       "director_fees              17     166804.882353    319891.409747    3285       \n",
       "email_address              0     NaN              NaN              NaN         \n",
       "exercised_stock_options    102    5987053.774510   31062006.568836  3285       \n",
       "expenses                   95     108728.915789    533534.814109    148        \n",
       "from_messages              86     608.790698       1841.033949      12         \n",
       "from_poi_to_this_person    86     64.895349        86.979244        0          \n",
       "from_this_person_to_poi    86     41.232558        100.073111       0          \n",
       "loan_advances              4      41962500.000000  47083208.701900  400000     \n",
       "long_term_incentive        66     1470361.454545   5942759.315498   69223      \n",
       "other                      93     919064.967742    4589252.907638   2          \n",
       "poi                        146    0.123288         0.329899         0          \n",
       "restricted_stock           110    2321741.136364   12518278.177383 -2604490    \n",
       "restricted_stock_deferred  18     166410.555556    4201494.314703  -7576788    \n",
       "salary                     95     562194.294737    2716369.154553   477        \n",
       "shared_receipt_with_poi    86     1176.465116      1178.317641      2          \n",
       "to_messages                86     2073.860465      2582.700981      57         \n",
       "total_payments             125    5081526.488000   29061716.401161  148        \n",
       "total_stock_value          126    6773957.452381   38957772.732279 -44093      \n",
       "\n",
       "                                  25%         50%          75%        max  \n",
       "bonus                      431250.00   769375.0    1200000.00   97343619   \n",
       "deferral_payments          81573.00    227449.0    1002671.50   32083396   \n",
       "deferred_income           -694862.00  -159792.0   -38346.00    -833        \n",
       "director_fees              98784.00    108579.0    113784.00    1398517    \n",
       "email_address             NaN         NaN         NaN          NaN         \n",
       "exercised_stock_options    527886.25   1310813.5   2547724.00   311764000  \n",
       "expenses                   22614.00    46950.0     79952.50     5235198    \n",
       "from_messages              22.75       41.0        145.50       14368      \n",
       "from_poi_to_this_person    10.00       35.0        72.25        528        \n",
       "from_this_person_to_poi    1.00        8.0         24.75        609        \n",
       "loan_advances              1600000.00  41762500.0  82125000.00  83925000   \n",
       "long_term_incentive        281250.00   442035.0    938672.00    48521928   \n",
       "other                      1215.00     52382.0     362096.00    42667589   \n",
       "poi                        0.00        0.0         0.00         1          \n",
       "restricted_stock           254018.00   451740.0    1002369.75   130322299  \n",
       "restricted_stock_deferred -389621.75  -146975.0   -75009.75     15456290   \n",
       "salary                     211816.00   259996.0    312117.00    26704229   \n",
       "shared_receipt_with_poi    249.75      740.5       1888.25      5521       \n",
       "to_messages                541.25      1211.0      2634.75      15149      \n",
       "total_payments             394475.00   1101393.0   2093263.00   309886585  \n",
       "total_stock_value          494510.25   1102872.5   2949846.75   434509511  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "desc = df.describe()\n",
    "desc = desc.transpose()\n",
    "desc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From above summary:\n",
    "- Looks like we have 146 people / data points in our dataset.\n",
    "- There are 128 non-POIs and 18 POIs in our dataset.\n",
    "- There are 21 available features.\n",
    "- We cannot use the following features due to lack of data points:\n",
    "  - director_fees\n",
    "  - loan_advances\n",
    "  - deferral_payments\n",
    "  - deferred_income\n",
    "  - restricted_stock_deferred\n",
    "\n",
    "### Finding Outliers\n",
    "\n",
    "To find outliers, first we plot a histogram of all of our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA28AAAbJCAYAAADXsj+oAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xm4JGV58P/vzQxoGHbQRMYJowgIuTCSZdAk6okaHWMi\nV4yRYFwgrnFPfnklvjGhRxOJia+RSFwDuOR1QKOvYHREo7bBsBhQDAoooyLDgKPsKsp6//6oOtD0\nnDmnz+nqruV8P9fV13RXdVfdVd3nnrqrnnqeyEwkSZIkSc22U90BSJIkSZIWZvEmSZIkSS1g8SZJ\nkiRJLWDxJkmSJEktYPEmSZIkSS1g8SZJkiRJLWDxptpExA8jYm3dcUhqn4i4MiKeUHccklSFiLg7\nIh5adxxqvpV1B6DlKzN3rzsGSa2V5UOSpGXDK2+SJElSC0WEF2KWGYs3ja1svvQXEfH1iLghIk6N\niPuV814YEVdExPURcWZEPGjgczYRkDSOdUvMOy+OiG9GxI0RcfLAvF5EfGDg9dry/TuVr4+NiG9F\nxC0R8e2IeNY0N1ZSO0TE8RFxdZkrLo+Ix0fEuog4r8w710TE2yJi5x18/qkR8ZWIuDkiroqIEwbm\nzealP46I7wKfjYh/j4iXDy3jfyLiqAlvqmpg8aaqPAt4EnAgcDDwuoh4PPBG4A+ABwHfBU6vLUJJ\nXRIsPe88FfgV4BHAMyPiyeX0HTbDjIhVwEnA+szcA3g0cHFlWyOpEyLiEOBlwK+UueJJwJXAncCr\ngH0p8scTgJfuYDE/Ap6dmXtS5Ks/maMQeyzwcODJwPuAZw/E8IvA/sAnqtkqNYnFm6qQwMmZuTUz\nbwT+FjiG4sDqlMy8ODNvB14LPDoifr7GWCV1wzh55+8y85bM3AJ8HnhkOT0WWOfdwOER8TOZuS0z\nL610iyR1wV3A/YBfiIidM/OqzPx2Zn45M7+UmXdn5neBdwOPm2sBmfmFzPx6+fwSihNQw+/tZeZP\nMvOnwMeBgyPiwHLec4DTM/POCWyfambxpqpsGXh+FcUZn/3L5wBk5o+B64HV0w1NUkctNe98b+D5\nrcCqhVZULudo4CXANWUzpUOWHrqkLsrMzcCrgR6wLSI2RsSDIuLgMm9cGxE3U5xw2neuZUTEkRHx\n+Yj4fkTcBLx4jvfek//KAu5DwHMiIoA/BD6AOsniTVX5+aHn15SPA2Ynls2O9gW2Tjc0SR1Vdd75\nMbDrwOufG5yZmZ/OzCeV0y8H3rO0sCV1WWZuzMzHUOSiBN4EvB24FHhY2RzyL9nxcfgHgY8BD87M\nvYB3zvHe4Wbe7wP+CHgicGtmXlDFtqh5LN5UhQBeGhGrI2IfioR0OrAROC4ifrHsSOCNwPmZedU8\ny5KkUQTwsgryTnBvc8mLgcdGxJqI2JOiyWXxpogHRsRRZTF4B0Whd9dEtkxSa5VX2B5f5p/bgJ9Q\nNLneHfghcGtEPBz4k3kWsxtwY2beHhHrKJqDzzs0SmaeV77nzcD7x98SNZXFm6qQFGeJPg18C7gC\n+JvM/CzwV8BHKM6GP4TiUv7g5yRpKRL4v4yfd+4ZLy4zPwOcAfwP8N8U95HMvn8n4E8pruBdDzyG\n+Q++JC1P9wNOBH4AXAs8APgL4M8pirBbKO53O5375qPB5y8FXh8Rt1DkszOG1rGj46f3A4cD/zre\nJqjJIrPa4+fybMJsbzpnZ+Ypla5AjRMR3wGen5mfqzsWaT7mJ0lNZG5SFSLiOcALM/Oxdceiyam8\neLtnwcW4OKdn5jMnsgI1hsWb2sb8JKmJzE1aqojYFfgcRS+8XnnrsJGaTZaDn26LiEuGpq8vBx+8\nIiKOH5j+uxRjSziml6SJMj9JaiJzk6alHKvy+xTNND9YcziasJGuvEXEYygGDHx/Zh5eTlsBfIOi\nV5utFPcHHJOZlw187szMdHR3SRNjfpLUROYmSZOwcpQ3ZeY5EbF2aPI6YHNmXgkQEacDR0XEA4Gn\nA/enGPxUkibG/CSpicxNkiZhpOJtB1Zz3wFSrwaOzMwvAF9Y6MMRYU+DUgdlZiz8rolbcn4yN0nd\n1YD85LGTpO0sJjeNM1TA2AkkM1v9OOGEE2qPwW3oznZ0YRsaZKxg6t6P/p7chiY9urANmY3JT50/\ndmrD78UYjbFJj8Uap3jbCqwZeL2G4gySJNVtrPzU6/Xo9/tVxySpBv1+n16vV3cYs8Y+djI/Sd2w\n1Nw0TvF2IXBQRKyNiF2Ao4GzFrMAE5DUDQ07OIIx81Ov12NmZmZSsUmaopmZmSblp0qOncxPUvst\nNTeNOlTARuBc4OCI2BIRx2XmncDLgbOBS4EzcqC3pFG0PQG1OfZZXdgG6MZ2tHkb6jw4mlR+ars2\n/55muQ3N0IVtqMNyzU1t+L0YYzWMsR4TG6R7wRVHZF3rljQZEUHW3yHAWCIiTzjhBGZmZjqZ9KXl\npt/v0+/32bBhg/lJUmMsNTdZvEmqTFeKN3OT1D3mJ0lNtNjcNM49b2PznjepGxp4z5skSVLneOVN\nUmW6cmbbZklSd9hsUlIT2WxSUu26UryZm6TuMT9JaqJWNZuUJEmSJI3G4k2Shng/rtQdXbsn1/wk\ndcNSc1OtzSZtty11Q9fuKbFZktQ9NpuU1ESLzU3e8yapMh4cSWoq85OkJvKeN0mSJEnqIIs3SZIk\nSWoBizdJGmKHAFJ32GGJpCaywxJJtbHDEklN5z1vkprIDksk1caDI0lNZX6S1ER2WCJJkiRJHWTx\nJkmSJEktYPEmSUPsEEDqDjsskdREreywxHbbUrd4T4mkpjI/SWoi73mTJEmSpA6qtXjz0r/UDV1r\nliRJktRENpuUVBmbJUlqKvOTpCay2aQkSZIkdZDFmyQNsUm31B1da9ZtfpK6wd4mJdXOZkmSmsr8\nJKmJbDYpSZIkSR1k8SZJkiRJLeBQAZLG1rV7SiRJkprIe94kVcZ7SiQ1lflJUhN5z5skSZIkdZDF\nmyRJkiS1gMWbJEmSJLWAxZskSZIktYDFmyQNsSdcqTu61huu+UnqhqXmJnublFQZe3OT1FTmJ0lN\nZG+TkiRJktRBFm+SJEmS1AK1Fm+225a6oWv3lEiSJDWR97xJqoz3lEhqKvOTpCZabG5aOclgJKmN\n3vOe90xs2fvttx+/93u/N7HlS+q2SeSnZzzjGey9996VL1dS9bzyJqkyXTmzveuuL5jIsu+++wes\nWbOFb37zooksX9KOmZ/mduedH+bii8/j0EMPrXS5kkbjlTdJGtOtt07qyttF3H33iya0bEnLQdX5\naffdv1jp8iRNlr1NSpIkSVILeOVN0rIREUcBTwX2AE7JzM/UHJIkmZskjcziTdKykZlnAmdGxF7A\nmwEPkCTVztwkaVQ2m5TUahFxakRsi4hLhqavj4jLI+KKiDh+6GOvA06eXpSSlhtzk6RJsHiT1Han\nAesHJ0TECooDoPXAYcAxEXFoFN4EbMrMi6cfqqRlxNwkqXI2m5TUapl5TkSsHZq8DticmVcCRMTp\nwFHAE4EnAHtExMMy811TDFXSMmJukjQJFm+Sumg1sGXg9dXAkZn5CuBtC3+8N/B8pnxIapN+v0+/\n3687jGFj5iYwP0ntNm5usniT1EU53sd7lQQhqT4zMzPMzMzc83rDhg31BXOvMXMTmJ+kdhs3N3nP\nm6Qu2gqsGXi9huIMtyTVydwkaSy1Xnnr9XrbVZ+S2qeBzZMuBA4q7ze5BjgaOGb0j/ewOZLUDQ3L\nT2PmJjA/Sd2w1NwUmRVcwV+CiMi61i1pMiKCzIwpr3Mj8DhgX+D7wF9n5mkR8RTgrcAKikFvTxxx\neVlJy6Y5XcSBB76IzZsvmtDyJe3ItPNT1bmpXGbl+Wn33Q/lggs+yqGHHlrpciWNZrG5yXveJLVa\nZs551jozNwGbphyOJAHmJkmTYfEmSdvpYbMkqRsa1myyAj3MT1L72WxSUu3qaDZZNZtNSt1kfpqb\nzSalei02N9nbpCRJkiS1gM0mJWk7PWyWJHWDzSYlNZHNJiXVzmZJC7HZpFQX89PcbDYp1ctmk5Ik\nSZLUQTablKTt9LBZktQNNpuU1EQ2m5RUO5slLcRmk1JdzE9zs9mkVC+bTUqSJElSB1m8SZIkSVIL\neM+bJG2nh/eUSN3gPW+Smsh73iTVzntKFuI9b1JdzE9z8543qV6LzU21Xnnbdde9J7bsFSvge9+7\nmlWrVk1sHZIkSZI0LbUWbz/5ybcntuyVK1dPbNmSJEmSNG013/M2uStv0OqWEZIkSZJ0H3ZYIknb\n6WGHAFI32GGJpCZqVIclEXEU8FRgD+CUzPzMHO+ZYKcAsHLlKm666fve8yZNkR0CLMQOS6S6mJ/m\nZoclUr0a0WFJZp4JnBkRewFvBrYr3iRJkiRJoxt5kO6IODUitkXEJUPT10fE5RFxRUQcP/Sx1wEn\nVxGoJEmSJC1nIxdvwGnA+sEJEbGCojhbDxwGHBMRh0bhTcCmzLy4smglSZIkaZkaudlkZp4TEWuH\nJq8DNmfmlQARcTpwFPBE4AnAHhHxsMx8VyXRSpIkSdIyNe49b6uBLQOvrwaOzMxXAG9b+OO9gecz\n2HOS1C7d68VNkiSpucYt3sbs8qg35uol1WlmZoaZmZl7Xm/YsKG+YCrVwxNKUjd07yRTD/OT1H5T\nGSqgbDb58cw8vHz9KKCXmevL168F7s7MN42wLIcKkDrGrrgX4lABUl3MT3NzqACpXtMeKuBC4KCy\nqLsGOBo4ZvSP9/DskdR+3TuzLUmS1DyLGSpgI3AucHBEbImI4zLzTuDlwNnApcAZmXnZ6KvvYeEm\ntd/MzAy9Xq/uMCRJkjptMb1NznlFLTM3AZsqi0iSJEmStJ3FjPMmSZIkSarJuPe8jamH97xJ7ec9\nb5IkSZNX85W3HhZuUvt5z5skSdLk2WxSkiRJklqg5maTktREPWzSLXVD95p19zA/Se03lUG6q+Qg\n3VL3OAjuQhykW6qL+WluDtIt1Wvag3SPqYdnj6T2696ZbUmSpOaxwxJJY7PDEkmSpMmzwxJJkiRJ\nagGLN0mSJElqAYs3SZIkSWoBOyyRNDY7LJEkSZo8OyyRNDY7LJEkSZo8m01KkiRJUgtYvEmSJElS\nC1i8SVo2IuIhEfEvEfHhumORpFnmJkmjsniTtGxk5ncy8wV1xyFJg8xNkkZl8Sap1SLi1IjYFhGX\nDE1fHxGXR8QVEXF8XfFJWp7MTZImoQG9TfbrDUHS2Pr9fp29TZ4GrB+cEBErgJPL6YcBx0TEoTXE\nJmn5MjdJqlwDireZekOQNLY6hwrIzHOAG4cmrwM2Z+aVmXkHcDpwVETsExHvBB7pGW9Jk2RukjQJ\nNQ/SLUkTsRrYMvD6auDIzLwBeMnCH+8NPJ/Bk0xS+/T7ffr9ft1hDBszN4H5SWq3cXOTxZukLsrx\nPt6rJAhJ9ZmZmWFmZuae1xs2bKgvmHuNmZvA/CS127i5yeJNUhdtBdYMvF5DcYZ7RD08oy11Q8Ou\nwI2Zm8D8JHXDUnNTZFZwEmgJIiIrOQG1AytXruKmm77PqlWrJrYOSfcVEWRm1LDetcDHM/Pw8vVK\n4BvAE4BrgC8Bx2TmZSMsa4K56SIOPPBFbN580YSWL2lH6shPVeam8vOV56fddz+UCy74KIcear8p\nUh0Wm5scKkBSq0XERuBc4OCI2BIRx2XmncDLgbOBS4EzRj04kqQqmJskTULNzSZ7eOlfar86myVl\n5jE7mL4J2LS0pfYwN0ndUFd+mkxuAvOT1A02mxxis0lp+upqNlklm01K3WR+mpvNJqV62WxSkiRJ\nkjrI3iYlaTs9bJYkdUPDepusQA/zk9R+NpscYrNJafpslrQQm01KdTE/zc1mk1K9bDYpSZIkSR1k\n8SZJkiRJLeA9b5K0nR7eUyJ1g/e8SWoi73kb4j1v0vR5T8lCvOdNqov5aW7e8ybVy3veJEmSJKmD\nam422cNL/1L7da9ZkiRJUvM0oHiT1HYzMzPMzMywYcOGukOpSA9PLEnd0L2TSz3MT1L7ec/bEO95\nk6bPe0oW4j1vUl3MT3PznjepXt7zJkmSJEkdZPEmSZIkSS1g8SZJkiRJLeAg3ZK0nR52CCB1gx2W\nSGoiOywZYocl0vTZIcBC7LBEqov5aW52WCLVyw5LJEmSJKmDLN4kSZIkqQUs3iRJkiSpBSzeJEmS\nJKkFLN4kSZIkqQUcKkCSttPDrrilbnCoAElN1NKhAk5gUgnIoQKk6ZlNQBs2bLAr7nk5VIBUF4cK\nmJtDBUj1atlQAT08cyS138zMDL1er+4wJEmSOs173iRJkiSpBSzeJEmSJKkF7LBEWiYiWn2rhyRJ\n0rJn8SYtK5PuoMgCUZIkaVJsNilJkiRJLWDxJkmSJEktYLNJSdpODwfBlbrBQbolNVFLB+me3Lod\npFu6r6LDksnf8+YguPNxkG6pLg7SPTcH6Zbq1bJBuiVJkiRJo7B4kyRJkqQWsHiTJEmSpBaweJMk\nSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBZYWfUCI+IhwF8Ce2bm\nH1S9fElaqohYBbwduA3oZ+YHaw5JksxNkkZW+ZW3zPxOZr6g6uU2Ub/frzuEsXVhG6Ab29GFbWiB\npwMfyswXAU+rO5hJ6sLvyW1ohi5sQwt0Jje14fdijNUwxnqMVLxFxKkRsS0iLhmavj4iLo+IKyLi\n+MmE2Fxd+EF0YRugG9vRhW2owyLz02pgS/n8rqkGOmVd+D25Dc3QhW2ow3LNTW34vRhjNYyxHqNe\neTsNWD84ISJWACeX0w8DjomIQ6sNT5IWtJj8dDWwpnyb9/xKmiRzk6TKjZQgMvMc4MahyeuAzZl5\nZWbeAZwOHBUR+0TEO4FHLsercZKmazH5Cfgo8PsR8XbgrOlGKmk5MTdJmoTIzNHeGLEW+HhmHl6+\nfgbw5Mx8Yfn62cCRmfmKEZc32ooltUpmxrTXWWV+MjdJ3TXt/OSxk6RRLCY3jdPb5FgJpI4DPEnL\nxpLzk7lJ0gR57CRpLOO0q97Kve2zKZ9fPV44klQJ85OkJjI3SRrLOMXbhcBBEbE2InYBjsZ22pKa\nwfwkqYnMTZLGMupQARuBc4GDI2JLRByXmXcCLwfOBi4FzsjMyyYXqiRtz/wkqYnMTVK9ImKfumOY\nhJE7LBl7RRE/CzyYor331szcNpUVVyAiHgG8myL+TwLHZ+aN5bwvZea6OuNbqoh4Wma2+oxfRBwE\n/CJwaWZeWnc8o4qIleV/4kTE7sAhwLcz84Z6I1ucNv9dz2r7NpifmsncVL+2/21D+7YhIvZp4m/F\n/ViNJu/HiHhdZv5N+fww4GPAzkAAf5iZ59cZ36Bx9+M4HZaMJCKOAN4B7MW97bofHBE3AS/NzC9P\nOoYKvAPoARcAzwf+qzyw2Ezxw2i8iHg6xQ8Yih9LAG+PiJUAmfnRumJbjIjoA8/IzOsi4jnAXwH/\nCZwQEe/JzH+qNcARRMSxwP+JiOuBVwH/DHwHOCQiXpOZH6wzvlF04e+6C9tQMj81gLmpObrwt92G\nbdjRwXJENOZg2f1YjTbsR+D3gb8pn78ZeFVmboqIdcBbgV+rLbJSZfsxMyf6AL5K0Q3u8PRHAV+d\n9Por2ob/GXr9m8Dmchu+Und8I27DncC/UwwaehrwXuCHs6/rjm8R2/G1gecXAvuWz3cFLqk7vlG3\nAdgPeGj5HRxYTv/ZFm1DF/6uW78NZbzmpwY8zE3NeXThb7sN2zCYXyiu+j+lfL4OOLfu+NyPy3o/\nfnVo3sV1x1flfpz4lTdg18y8YHhiZp4fEaumsP4qZETsmZk3A2Tm58szxR8F9q43tJE9GngT8N/A\nOzIzI+JxmXlczXEt1h0R8eDMvJri4OLWcvptjNcBzzTdmZnXAddFxA8z81sAmbktIu6uObZRdeHv\nugvbAOanpjA3NUcX/rbbtg2rM3MTQGZ+KSJ2rTugkvuxGm3Yjw+NiLMoWm48OCJ2zcxbyyuY06h3\nRlHJfpzGxmyKiE8C7wO2UOzUNcBzgU9NYf1V+HvgMOC82QmZ+T8R8Xjgr2uLahEy878j4reAVwCf\ni4i/qDumJfpT4OyI+AjwdeCzEfFp4DcoztK3wfci4kRgD+CbEfFW4MPAE4Grao1sdF34u+7CNoD5\nqSnMTc3Rhb/tNmxDGw6W3Y/VaMN+PGrg+ZuBFeXzB1I0VWyCSvbjVDosiYjfBp4GrC4nbQXOysxP\nTnzl2k5ErKZo//vLmfnQuuNZrIjYC3gWcBDFPT1bgDMz8/JaAxtRROxH0dvYtcB7gP9N0Rb7cuCN\n5ZnvxuvC33UXtqFr2pyfzE3N0YW/7aZvQ0TMDLxM4MuZ+cOyM4ZnZOY/1xPZfbkfq9H0/dgWVezH\nqfU22VUR8eLMfFfdcUjSMPOTJGm569r/hbW2w4+IF9e5fhW68j10YTvchmbowjZ0RRe+C7ehObqw\nHW3YBmOshjEuH4vZj01pS9t4EXEoRXva2cucV1Nc5uxMJS+pncxPkqTlrvy/cH/ggsz80cCsNt2z\nu6CpFG9tP7CIiOOBY4DTKcZSguIGw40RcUZmnlhbcIvQ9u9hVhe2owvbMI876g5gVF34HsxPzeE2\ntIL5qUJtiHEebfgtNCbGphdGEfFK4GXAZcCpEfGqzPxYOfuNwKbaghsQEb8B3JCZl5b3O/4KxTAH\nI//NTPyet6EDi9kB6dYARwOtOLCIiCuAwzLzjqHpuwCXZubD6olsdF34HqAb29GFbZhPRGzJzDV1\nx7GQrnwP5qdmcBvawfxUnTbEOJ82/BaaEuNQYXQExQDYHyvnfSUzj6gzvjKOrwGPyswfRcRa4N+A\nf83MtzYoxhMpxmJdAXweeCzwCeC3gI9n5j+MtJwpFG9dOLC4HFifmVcOTV8LnJ2Zh9QQ1qJ04XuA\nbmxHR7bhknlmH5KZu0wtmCXqwvcA5qemcBuaw/w0HS2JsfG/hZbE2IbC6OuZ+QsDr3cDPgJcCvxm\nZj6ytuBKEXEp8AhgF2Ab8ODMvDkifobiiuYjRlnONJpN3kVxOf3Koen7l/Pa4NXAf0TEZoqun6E4\nu3QQRbfKbdCF7wG6sR1d2IYHAuuBG+eYd+6UY1mqLnwPYH5qCrehOcxP09GGGNvwW2hDjDHbVDIz\nryyb+30kIg6gGKusCb4fEY/MzIsBykLzd4BTKAqmJrg9M+8E7oyIb2XmzQCZ+ZOIuHvUhUyjeGv9\ngUVmfioiDgHWUSSqpBiX4cLyS2iD1n8PpS5sRxe24RPAbpn5leEZEfGFGuJZii58D+an5nAbmsP8\nNB1tiLENv4U2xNiGwui5DN0jmJl3RMTzgHfXE9J2botyEHbgl2YnRjFG6MjF27QG6V5Buw8sOqEr\n30MXtqML29AFfg/N0YXvwm1QldrwXbQhRo0vItYAd2Tm94amB/DrmfnFeiJrl4i4f2b+dI7p+wEP\nysz5mtDe+34H6ZYkSZKk5qt1kG5JkiRJ0mgs3iRJUqNFxKkRsW2Bnvlm3/uwiDgnIr4SEV+NiKdM\nI0ZJy88ic9Nbyrz0lYj4RkTM1UnNwuu02aQkSWqyiHgM8CPg/Zl5+ALvfS9wXma+qxxY+JOZ+ZAp\nhClpmVlMbhr63MuBR2bmCxa7Tq+8SZKkRsvMcxjqSj0iDoyITRFxYUT8Z9nrKsC1wJ7l870oOtGQ\npMotMjcNehawcSnrnMZQAZIkSVV7N/DizNwcEUcCbweeAJwInBcRrwBWldMkaVp2lJsAKMfHWwt8\nbikLt3iTJEmtEhG7AY8GPlz0Vg7ALuW/bwH+JTP/MSIeBfwr8AvTj1LScrNAbpr1h8CHc4n3rlm8\nSZKkttkJuCkzj5hj3q8BJwBk5vkRcf+I2C8zr5tqhJKWo/ly06yjgZeOswJJkqTWyMxbgO9ExDOg\nGCw4Ih5Rzr4ceGI5/VDg/hZukqZhgdxERDwc2Dszz1/qOizeJElSo0XERuBc4JCI2BIRxwF/BDw/\nIi4GvgY8rXz7/wKOK6d/EHheHTFL6r5F5iYorrotqaOSe9bpUAGSJEmS1HxeeZMkSZKkFrB4kyRJ\nkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmS\npBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKk\nFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQW\nsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaw\neJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4\nkyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiT\nJEmSpBaweJMkSZKkFrB4kyRJkqQWsHiTJEmSpBaweJMkSZKkFrB4a6iIeG9EvGGE9x0SERdHxC0R\n8fIpxXZ3RDx0GuuSJEmSVLB4a64sHwt5DfDZzNwjM0+ecEzLyqgFtKRCk086Da1/bXkSat7/AyPi\nkxHxnGnFJal+s3ksIn4jIi6vO57Fiog/iYhtZX7du+54VL2VdQegecUI7zkAOHdJC49YmZl3Dk1b\nkZl3LWV5kpa9xZ50euSE4xlLZv523TFImroEMjO/CDy86oVHxAzwgcxcM4Fl7wz8H2BdZn6t6uWr\nGbzy1hARcUREfLk8U3I6cP+Beb9TnqW+MSL+KyIOL6d/DpgBTi4/97CIuF9EvDkivhsR34uId0TE\n/cv3z0TE1RHxmoi4Fjg1Ik6IiH+LiA9ExM3A8yLiVyPivHJ910TE28qEsJjteW9EvDMiPl3G1o+I\n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\nNjMPzcxPZuZTgf8GvhgR92y4XSg54rvAgZl5/2pJ8Sur+7/ecNurIuIu1f1tMvMsgMy8mLKXliT1\nlnPeJGnMImI1cMvcFaYiIoDfzcz/GGMsTwF+JzPfNMY2R1ppazPbXEO50nhttYrqwymLpzQ5XJOI\n+DzweeADs/O9IuI+lBMej8/MAxps+0LgQYMr2EXECymF1XaZeb+m2q7aWg28g7Li42HAt8axL1RE\nvJpyoukI4NHAPShzHB8L/Po4FueRpKZYvEmS1JBq7tehlGJi7tYMRzY89+vvgdMz8/Nznl8PvDsz\n1zXV9pz2DgTeRLkKee+l3l9Tm/sDLwfWUZ0koMwzPK7p1UUlqUkWb5IktSAiDsnM45d+ZyNtvygz\nx7bnWbUJ8drMPK/lz91a25JUB4s3SZJaEBEbMnO1ba+MtiWpDm4VIElSQyLivEVebnQIYYfbvtek\nti1JTbN4kySpOfcC1lO2C5jrTNueuLYlqVEWb5IkNeczlJUdz5n7QkQ0va+ebY+/bUlqlHPeJEmS\nJKkH3KRbkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJ\nknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmS\nesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6\nwOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA\n4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDi\nTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJNkiRJknrA4k2SJEmSesDiTZIkSZJ6wOJN\nkiRJknrA4k2SJEmSesDirSYR8cCIODciboiIV7UdD0BErImI2yJi3p9zRLwxIv5l3HGpiIh/jog3\ntx2HJEldFxGXR8Tj2o6jTRHx3Ij4XNtxDIqI3SPixoiItmNZKSIz245hIkTEscBPMvPPWozhcuBF\nmfml6vEa4PvAlpl5W1txdVFETANrM/MP245FmiRVHvqjzPxi27EsJiJeSInzUW3HImlpEXEZ5Xf2\n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\nkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGT\nN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3\nSZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJ\nkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mS\nJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIk\nSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJagGTN0mSJElqAZM3SZIkSWoBkzdJkiRJ\nagGTN0mSJElqAZM39V1ELI6IlzZdD0mSJGmYmLypJxHxlYj4pymLs7xJUt9ExBci4uAaytkvIs6t\nupwu6rEwIh6OCP9XS3NkvFjh7XR9AD4i/m9ELImIeyLiz3opd0UMyntfN/8haGBFxMpN10FS9br9\nB5yZ78jMD3exvYmI+Jv+1G7uZjioJakPjBeVm8sB+COBd2bmmpn5iwrrpA4mb+pKRGxVBrg7IuLS\niHhlRLwNeB3wgfKoy2kdL9k+In4REXdGxEkR8biObe0eEReX2/qfiNi2Y93iiPhARPwSuMcjzlJ7\nVHnAZY6xwDP/0oAzXrRbRATwFODyFXz9vKnbK7ep5bBhrOWKiFWAM4DvAk8EDgD+HZgo/368POqy\n5+RLgL2AlwObAdsB+5Xb2h44BngrsC7wReD0soxJrwVeAaydmQ9XuW+SejPNAZcXRsT55cGZiyNi\n547n7hcRv42IuyPi6oh4XUQ8A/g34PnlQaDby+d+pez29J2IuBd48dQj1BGxZ1nGXRFxVUS8PCI+\nAuwEHFVu7zPlc58REd+PiN9FxBURsVfHdp4QEaeX2/kJ8LQu9/1TEbG0fN0vI2KbmQ5qTXcArGM7\nq0XEJ8r38s6IOLfzgFfH8/4qIq6JiK3n8BFJA8N4MXjxIiLeGBHXRsRtEfGhKesiIg4q36/bIuI/\nImKdsrx7gHnALyLiyvL5G0bEf0bELeVndkDHtsYj4hsR8dWIuAvYr9zHj0TE/wC/Bzar4r0fOpnp\n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\nZt5Waw0ljaLK58j1mjdJktQqy5mH8grgZeXyrYBVTdwk1aGOOXJN3iRJ0kCb4zyU7wf2L5d/HXhT\nE3WWNPyamCPXqQIkSZIkqQU88yZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEkt\nYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g\n8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDy\nJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPIm\nSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJ\nkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmSJEktYPImSZIkSS1g8iZJkiRJLWDyJkmS\nJEktYPKmvouIhyPiqU3XQ9LMImI8Ir7aYPkDEyci4gsRcXCD5d8TEQtnWb84Il5aY31eHxHfq6s8\nSVL3TN4kaTRl0xUYFJn5jsz8cDfPjYivRMQ/9bn8NTNz8SzbT2r8vDLz3zPz5XWVJzWpPDjykqbr\nIXXL5E0DIyJWbroO0giJvm0oYl6/trWccvyfJanfkj7GQ6lq/iPUrCLiwIi4PiLujogrIuIlEbFD\nRPw4Iu6IiBsj4rMRscoMr98tIi6KiLsi4rqIOKxj3cKy69SbI+Ja4AcR8e2IePeUbfwyIvaseFel\noTXd75iiwTI/Io4vl18aEc/ueM1BEXFVue6yiHhVx7r9IuJ/IuKTEXEbcFhEzI+IIyPi2oi4ueyK\nuGrHa95fxovrI+LNXdb7K+V2vhMR9wJjEbFhRPxnRNwSEVdHxAEdz18pIj7UUe8LI2Ljct0zIuL7\nEfG78j3Ya0o5/1TeHyvr+MGIuDUiromI15Xr3ga8DvhA2dXxtFnqvn9EnN7x+MqIOLnj8ZKI2K68\n/3BEPG05298+In4REXdGxEkR8bjlvHcz7ke5fq2IOKF8HxdHxD9GRJTr9ouIc2fbvjQMoug6/hTg\njPI39/6I2KOMeXdExNkR8YwutrM4It5XtlfuiYhjImL9iDizbP98PyLW7nj+8yLi/LKMiyNi5451\n+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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1736b4e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hide_me\n",
    "%pylab inline\n",
    "\n",
    "# This creates a canvas of size 15 points width and 30 points height\n",
    "fig = plt.figure(figsize=(15, 30))\n",
    "\n",
    "for idx, feature in enumerate(features_to_test):\n",
    "    # This means: Divide that canvas to 6 rows, 3 columns,\n",
    "    # and at idx+1 position (since subplot is base-1), draw our plot.\n",
    "    ax = plt.subplot(7,3, idx+1)\n",
    "    \n",
    "    plt.title(feature)\n",
    "    plt.xticks(rotation='vertical')\n",
    "    plt.gca().set_yscale(\"log\")\n",
    "    \n",
    "    # hspace here sets space between rows.\n",
    "    # http://matplotlib.org/api/figure_api.html#matplotlib.figure.SubplotParams\n",
    "    plt.subplots_adjust(hspace=.6) \n",
    "    \n",
    "    ax.hist(data_to_test[:,idx])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Judging by the x-axis scales of some of our histograms like bonus, salary, etc., there seems to be some outliers in our dataset.\n",
    "\n",
    "### How do we remove outliers?\n",
    "\n",
    "Let's write a function to show five largest data to find our outliers (and show if they are POI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def show_largest_five(data_dict, features, feature):\n",
    "    # What are the 5 largest points, sorted by x?\n",
    "    print \"5 largest\", feature\n",
    "    sorted_list = sorted(data_dict.iteritems(), \n",
    "                 key=lambda (key, val): int(0 if val[feature] == 'NaN' else val[feature]), reverse=True)[0:5]\n",
    "    print [(i[0]+ \"(\" + ('poi' if i[1]['poi'] else 'not poi') + \"): \"+ str(i[1][feature])) for i in sorted_list]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use that function on `bonus` feature:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 largest bonus\n",
      "['TOTAL(not poi): 97343619', 'LAVORATO JOHN J(not poi): 8000000', 'LAY KENNETH L(poi): 7000000', 'SKILLING JEFFREY K(poi): 5600000', 'BELDEN TIMOTHY N(poi): 5249999']\n"
     ]
    }
   ],
   "source": [
    "show_largest_five(data_dict, features_to_test, 'bonus')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**`TOTAL` is clearly an outlier,\n",
    "let's remove it from our dataset, and see how that changes our histograms.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if 'TOTAL' in data_dict:\n",
    "    del data_dict['TOTAL']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA28AAAbWCAYAAAAlMo/mAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xm4ZFV18P/vopsGmQU1KhDaMKjkxSEmoHmjVNBoG6Pk\nZ6IEo6JxjGJiEl4xiUq1/hRNjNGIGAcgaiI4JqARhahlSBxRUSLyCgrSDAIyKsgk6/3jnAvVt+9Q\n99apOkN9P89TT9d49qpz+6671zn77B2ZiSRJkiSp2baqOwBJkiRJ0vIs3iRJkiSpBSzeJEmSJKkF\nLN4kSZIkqQUs3iRJkiSpBSzeJEmSJKkFLN5Um4j4SUSsrzsOSe0TERdHxGPrjkOSqhARd0bEL9Ud\nh5pvbd0BaHZl5o51xyCptbK8SZI0MzzzJkmSJLVQRHgiZsZYvGls5fClV0bEdyLi2og4MSK2KV97\nQURcEBHXRMSpEXG/oc85REDSOA5cZd55UUR8LyKui4jjhl7rR8QHhh6vL9+/Vfn4ORHx/Yi4MSJ+\nEBHPmOaXldQOEXF0RFxa5orzI+KQiDgwIr5U5p3LI+LtEbH1Ip9/UkR8MyJuiIhLIuKYodfm8tIf\nRcQPgc9GxCcj4sh52/h2RBw64a+qGli8qSrPAB4P7A3sB7wqIg4B3gA8Dbgf8EPglNoilNQlwerz\nzpOAXwUeAjw9Ip5QPr/oMMyI2B54G7AhM3cCHgWcU9m3kdQJEfFA4KXAr5a54vHAxcAdwJ8Cu1Hk\nj8cCL1lkMz8FnpmZO1Pkqz9eoBB7DPAg4AnA+4BnDsXwUOD+wL9X863UJBZvqkICx2XmZZl5HfB6\n4HCKjtUJmXlOZt4G/CXwqIj4xRpjldQN4+SdN2bmjZm5Cfg88LDy+VimzTuBAyLiHpl5ZWaeV+k3\nktQFPwe2AX45IrbOzEsy8weZ+Y3M/Gpm3pmZPwTeDRy80AYy8wuZ+Z3y/rkUB6Dmv7efmT/LzFuA\nTwD7RcTe5WvPAk7JzDsm8P1UM4s3VWXT0P1LKI743L+8D0Bm3gRcA+w+3dAkddRq886Phu7fDGy/\nXEPldg4DXgxcXg5TeuDqQ5fURZl5IfByoA9cGREnR8T9ImK/Mm9cERE3UBxw2m2hbUTEQRHx+Yi4\nKiKuB160wHvvyn9lAfdh4FkREcAfAB9AnWTxpqr84rz7l5e3veaeLIcd7QZcNt3QJHVU1XnnJmC7\nocf3HX4xM8/IzMeXz58PvGd1YUvqssw8OTMfTZGLEngTcDxwHrBPORzyr1m8H/5B4N+APTJzF+Af\nF3jv/GHe7wP+EHgccHNmfqWK76LmsXhTFQJ4SUTsHhG7UiSkU4CTgedGxEPLiQTeAHw5My9ZYluS\nNIoAXlpB3gnuHi55DvCYiNgzInamGHJZvCniPhFxaFkM3k5R6P18It9MUmuVZ9gOKfPPrcDPKIZc\n7wj8BLg5Ih4E/PESm9kBuC4zb4uIAymGgy+5NEpmfql8z5uB94//TdRUFm+qQlIcJToD+D5wAfD/\nZ+ZngVcDH6M4Gv4AilP5w5+TpNVI4F8YP+/ctV5cZp4JfAj4NvA1iutI5t6/FfBnFGfwrgEezdKd\nL0mzaRvgWOBq4Arg3sArgaMoirAbKa53O4XN89Hw/ZcAr42IGyny2YfmtbFY/+n9wAHAP4/3FdRk\nkVlt/7k8mjA3m85nMvOEShtQ40TERcDzMvNzdcciLcX8JKmJypkEnwTsRDHhzpk1h6QWiohnAS/I\nzMfUHYsmp/Li7a4NF+vinJKZT59IA2oMize1jflJUhNFxC7AmzPz+XXHonaJiO2Az1HMwuuZtw4b\nadhkufjplRFx7rznN5SLD14QEUcPPf9kirUlXNNL0kSZnyQ10UpzU+lVwHFIK1CuVXkVxTDND9Yc\njiZspDNvEfFoigUD35+ZB5TPrQH+L8WsNpdRXB9weGZ+d+hzp2amq7tLmhjzk6QmWkluopi99I3A\nGeV1m5K0oLWjvCkzz4qI9fOePhC4MDMvBoiIU4BDI+I+wFOBbSkWP5WkiTE/SWqileQmimLuscBO\nEbFPZr5riqFKapGRirdF7M7mC6ReChyUmV8AvrDchyPCmQalDsrMWP5dE7fq/GRukrqrAflpsdz0\nMuDty33Y/CR100py0zhLBYydQDKz1bdjjjmm9hj8Dt35Hl34Dg0yVjCz+H9gFtuexe88y203ROf7\nTm34W2aMxtik20qNU7xdBuw59HhPiiNIklS3sfJTv99nMBhUHZOkGgwGA/r9ft1hzLHvJGks4xRv\nZwP7RsT6iFgHHAacVk1YkjSWsfJTv9+n1+tNKjZJU9Tr9ZpUvNl3kjSWUZcKOBn4IrBfRGyKiOdm\n5h3AkcBngPOAD+XQTG6jaPvR7S507rrwHaAb36PN36HOI9uTyk91qPP/wCy2PYvfeZbbnrZZ7Tu1\n4WdsjNUwxvGstu80sUW6l204IutqW9JkRARZ/4QAY4mIPOaYY+j1eo1O+pJGMxgMGAwGbNy4sRP5\nyb6T1C0r7TtZvEmqTFeKN3OT1D3mJ0lNtNLcNM41b5IkSZKkKam1eGv6uG1Jo2nYbG5jMzdJ3WF+\nktREXvMmqXYOS5LUVOYnSU3ksElJkiRJ6iCLN0mSJElqAa95kzQ2rymR1FTmJ0lN5DVvkmrnNSWS\nmsr8JKmJvOZNkiRJkjrI4k2SJEmSWsDiTZLm8ZoSqTu6ds2bpNnmNW+SKuM1JZKayvwkqYlWmpvW\nTjKY5fT7fXq9Hr1er84wJI1pMBh4pkqSpuDe996T7bffme2337mybW67LZx11plst912lW1T0tJW\n23fyzJukynhkW1JTdSU/wX9Vvt21ax/HddddzQ477FD5tiUtrVVn3iRJkrQS/7vyLUasqXybkibD\nCUskaR4nLJG6wwlLJHWJwyYlVaYrw5LMTVL3dCU/QfX5aeutd+Daa3/ksEmpBi7SLUmSJEkd5GyT\nksbmbJOSNC19oFfeJLWVs01Kql1XhiWZm6Tu6Up+ctik1C0Om5QkSZKkDnKpAEmSJE1ExGRPdjpS\nQrPG4k2S5vF6XKk7vCa3CSZVYLV6FKy0Kl7zJqkyXbmmxNwkdU9X8lPbrnkrzrxNrngzX6vtvOZN\nkiRJkjrIpQIkjc1hSZI0LX1cKkBqP5cKkFS7rgxLMjdJ3dOV/OSwyc227rBJtZ7DJiVJkiSpgyze\nJEmSJKkFLN4kSZIkqQUs3iRJkiSpBSzeJGmefr/v7JlSRwwGA/r9ft1hSFIlnG1SUmW6MpubuUnq\nnq7kJ2eb3Gzrzjap1nO2SUmSJEnqIIs3SZIkSWqBtXU23u/36fV69Hq9OsOQNKbBYOA1YpI0FX2g\nV94ktdVq+05e8yapMl25psTcJHVPV/KT17xttnWveVPrec2bJEmSJHWQxZskSZIktYDFmyRJkiS1\ngMWbJEmSJLVArbNNStI0RcShwJOAnYATMvPMmkOSJEkamcWbpJmRmacCp0bELsCbAYs3SZLUGg6b\nlNRqEXFiRFwZEefOe35DRJwfERdExNHzPvYq4LjpRSlJkjQ+izdJbXcSsGH4iYhYQ1GcbQD2Bw6P\niAdH4U3A6Zl5zvRDlSRJWj2HTUpqtcw8KyLWz3v6QODCzLwYICJOAQ4FHgc8FtgpIvbJzHcttM3t\n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\npMrV+Xd1VJXE6DVvkqSZUp5p/PXM/Ku6Y5EkaSUs3iRJkiSpBbxwV5IkSZJawOJNkiRJklrA4k2S\nJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIk\nSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJ\nklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmS\nWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJklrA4k2SJEmSWsDiraEi4p8i\n4nUjvO+BEXFORNwYEUdOKbY7I+KXptGWJEmSpILFW3NleVvOK4DPZuZOmXnchGOaKaMW0JIKTT7o\nNK/99eVBqCX/BkbEpyLiWdOKS1L95vJYRPxGRJxfdzwrFRF/HBFXlvn1nnXHo+qtrTsALSlGeM9e\nwBdXtfGItZl5x7zn1mTmz1ezPUkzb6UHnR424XjGkpm/XXcMkqYugczM/wIeVPXGI6IHfCAz95zA\ntrcG/g44MDP/p+rtqxk889YQEfHwiPhGeaTkFGDbodd+pzxKfV1E/HdEHFA+/zmgBxxXfm6fiNgm\nIt4cET+MiB9FxDsjYtvy/b2IuDQiXhERVwAnRsQxEfHRiPhARNwAHBERvxYRXyrbuzwi3l4mhJV8\nn3+KiH+MiDPK2AYR8YtDr78tIi6JiBsi4uyI+I3y+ftGxE0RsevQe38lIq6KiLUR8ZxyH7yljO/C\niPj1iHhuub0rI+LZQ58dZX/8efm5yyPiOeVrLwSeAbwiIn4SEaeWzx9dfubGiDg/Ig5ZyX6RZsCo\nB53OW9XGI7Y46BgRa1azLUlaxJJ5bKE8NC3LtH1fiv7jd6cUjmpg8dYAEbEO+DfgfcA9gY8Avwdk\nRDwcOAF4AbAr8C7gtIjYOjMPAc4CXloOm7wQeCOwD/DQ8t/dgdcMNfcLZRu/CLyQIkE9BfhIZu4M\nfBD4OfCnwG7Ao4DHAi9ZxVd7BvBa4F7AOcC/DL321TLGe5ZtfiQi1mXmj4AB8PSh9z4LOHnoLOGB\nwLfK/XEy8GHgV4C9gWdSFLPble8dZX/sBNwfeB7wjojYOTPfXcb7pszcMTMPjYgHAi8FfjUzdwIe\n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\n1B115Sf7TpKWstrcNOpsk4cv8vzpFCvIt0pdSa/OZGvbs9P2rP1R71J+msX/r3W2PYvfeZbbnrYu\n5aaFNOlnaSwLa1Is0Kx4mhTLSo20SPdEGo7IY445hl6v1+odKKk49T8YDNi4cSNZ/4QAYzE3Sd1i\nfpLURKvNTbUWb3W1LWkyIqITnSNzk9Q95idJTbTS3DTOhCWSJEmSpCmptXhzxiSpGxo2m9vYzE1S\nd5ifJDXRanOTwyYlVcZhSZKayvwkqYkcNilJkiRJHeSwSUljc1iSpKYyP0lqIodNSqqdw5IkNZX5\nSVITOWxSkiRJkjrI4k2SJEmSWsDiTZIkSZJawAlLJI3NCQEkNZX5SVITOWGJpNo5IYCkpjI/SWoi\nJyyRJEmSpA6yeJMkSZKkFrB4kyRJkqQWcMISSWNzQgBJTWV+ktRETlgiqXZOCCCpqcxPkprICUsk\nSZIkqYMs3iRJkiSpBSzeJEmSJKkFLN4kSZIkqQWcbVLS2JzNTVJTmZ8kNZGzTUqqnbO5SWoq85Ok\nJnK2SUmSJEnqIIs3SZIkSWoBizdJkiRJagGLN0mSJElqAYs3SZIkSWoBizdJkiRJagGLN0mSJElq\nAYs3SZIkSWqBWou3fr/PYDCoMwRJFRgMBvT7/brDqIy5SeoO85OkJlptborMrD6aURqOyLraljQZ\nEUFmRt1xjMPcJHWT+UlSE600NzlsUpIkSZJawOJNkiRJklrA4k2SJEmSWsDiTZIkSZJawOJNkiRJ\nklrA4k2SJEmSWsDiTZIkSZJaYG3dAUzDr//6IVx//S2VbW/dOvjkJz/MHnvsUdk2JUmSlrPttjtO\nbNsbN76Ko48+emLblzS+iRRvEXEo8CRgJ+CEzDxzEu2M6uyzv8Ltt58G3KOS7d3jHk/j1ltvrWRb\nkqanablJ0pYiWr2O9qqsJDfdeuvlE4riddx2220T2rakqkykeMvMU4FTI2IX4M1AAzpIjwS2r2RL\na9ZsW8l2JE1XM3OTpC3lBLbZ3KJwZblpUmfetpnQdiVVaeRr3iLixIi4MiLOnff8hog4PyIuiIj5\n59pfBRxXRaCStBBzk6QmMjdJmoSVTFhyErBh+ImIWEORZDYA+wOHR8SDo/Am4PTMPKeyaCVpS+Ym\nSU1kbpJUuZGHTWbmWRGxft7TBwIXZubFABFxCnAo8DjgscBOEbFPZr6rkmglaR5zk6QmMjdJmoRx\n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\nRVmvGGHbWwBvpPzNv5aZn+rZdkRmjuy3G2Ux2tWeAn4SEfcByBEumBsRhwLvrjPN3Q/4DHBTRCwD\nnp2ZU6NqW5JGzQlLJM0qM68Ezo2IJ0NZNykibr7AOyLuCtwmM3/cVIwdFvXCeerF/XsBj4mI97L6\nGbFRuB/lou5/B66sHdnrMvN7izDd8xkRMX2dzC8i4h8A6kxbN4yw3fXq0MnNKOsnbVGf34jR/zv4\nGcpsfBPAVpm5FWWm1ivqtlGaXjfo88D+EfH5iNioPvfAEbf9Z8r/Z9O3UynDhKfvj9JjM/NP9f67\ngf0y886UM63/OeK2JWmkLN4kAVAv7j8ZuEtEXBARzwOeAbwgIk4Hfg30Dqnbj7LOixausRnQGp41\nbCgzba2DT1CGqP4YeDVwUkR8GDiFsvbbKK3IzEMz85Lp60Iz84+ZeQhl8ehR2jkz35CZX8zMxwM/\nB74dEduMuF2A11KGXO+bmXesU4pfWO/facRtrx8Rt6r3N8rMUwAy8zeUtbQkqbO85k2SFllELAf+\nNnOGqYgI4MGZ+YNFjOVxwIMy802L2OZAM22tY5srKGcaL6uzqN6PMnnKKIdrEhEnAicCH52+3isi\ntqXMIvfozHzUCNs+C7h77wx2EfFcSmG1aWbuNKq2a1vLgfdQZnw8EPjFYqwLFREvpxxoOhh4GHAb\nyjWOjwDutBiT80jSqFi8SZI0IvXarzdQiomZSzMcMuJrv94FfDMzT5zx/D7A+zJzl1G1PaO9fYE3\nUc5C3n6+1w+pzYcD/wLsQj1IQLnO8COjnl1UkkbJ4k2SpAZExPMy86j5XzmStp+fmYu25lldhHjn\nzPxVw5+7sbYlaRgs3iRJakBEXJCZy217abQtScPgUgGSJI1IRPxqLZtHOoSwxW3fblzblqRRs3iT\nJGl0bgfsQ1kuYKaTbXvs2pakkbJ4kyRpdL5KmdnxtJkbImLU6+rZ9uK3LUkj5TVvkiRJktQBLtIt\nSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJ\nkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmS\nJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIk\nSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJ\nHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkd\nYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g8SZJkiRJHWDxJkmSJEkdYPEmSZIkSR1g\n8SZJkiRJHWDxNiQRcZeIOD0iroyIlzUdD0BErIiImyJi1r9zRLwxIj602HGpiIj3R8Sbm45DkqS2\ni4jzIuKRTcfRpIh4RkR8o+k4ekXEjhFxVURE07EsFZGZTccwFiLiSOCKzHx1gzGcBzw/M79TH68A\nfg9skJk3NRVXG0XEJLBzZj6r6VikcVLz0Asy89tNx7I2EfFcSpwPbToWSfOLiHMpv9nvNND2TcCd\nM/P3i91228zsa2rxeeZteHYCzpxtw1xnvkYggc4d+Yiq6TgkDUXWmySNk3Xqp0TEBsMOpGGd7GuO\nE4u3IYiI7wATwOH11PEn65C4r0XE1cBERNwtIqYi4vKI+HVEPL7n/UdHxBH19VdFxEkRsW1E/Fd9\n/VkRce95Yvg4sCNwfN3Ha3o2PzMi/hARf4qIN/W8Z7K+j4jYKCI+ERF/rm3+NCJuN0+bUxFxcET8\nJCJWRcSXIuI2PdsfEBEn1/2dHhF7zXjv2yPih8A1wJ0i4rkR8bs69PT3EfH0+tqIiDfXIRMrI+Kj\nEbF53TY9NPTZs33GOeLeB3gjsF/9rk6rz28fEcdFxF8i4rcR8cK17afnO/xcRBxb4/5ZROzes32+\nv/vb5mtDkiQVEbEsIg6LiIvq7b0Rsaxum4iICyPiVbW/cHE9yz793q0j4vjaZ/lp7YecNE973693\nf1H7DE+pzz+u9m0uj4gfRsQ9e95zXkS8LiJ+CVwVETvXvspzI+L82s94SUT8Q0T8su7jfX189uf2\nxlv3+c8R8Zu6j8NnvP5FEXFm7Z+cERF71Oe3j4jPR8Sltb/18p73TEbEZ2pf68rad7lv3bZGX7On\nH7ZeROwXEafMiOGAiPhyvb9hRLy79tcuidJX3mi+z60ZMtPbEG7AdymnkQGOBq4AHlgfbwacA7wB\n2AB4OHAlsGvP6/8E7AFsCHwbOA94JuXoxtuA7/QRw7nAI3oerwBuAj5Q97s7cB1wl7r9QOBj9f4/\n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\noWgbsa7tyhtgXVVdAVBVP0hyXbeh3eCcJM+sqqOBs5L8XFV9Jsk+wE/GXYnFmyRJklbrzsBhNPNW\nrXTajGPZmsuTPLCqzgRoz8A9DngzzdmuPvhxkl2q6hqa65+AGyZ07kXxVlU/BV6d5F3Aa5JcTv9q\niNsCn23vV5K7VtU3ktymy6BWeBbwd0leBlwBnJbkEuDi9rmx2G1SkiRJq5LkaOCYqjp1C88dW1VH\ndhDWyjj2Bq6tqm+uWB7gF6vqP7qJ7Eax3LKqfrSF5XcC7lpV2zrD2Ym2AP6Fqnpp17FsT5JdgN2r\n6sKuY1mW5HbAPWgK4EtW/v/c7vst3iRJkiSp/5znTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIk\nSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJ\nkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmS\nBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIG\nwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNkiRJkgbA4k2SJEmSBsDiTZIkSZIGwOJNE5fkoiSH\ndB2HJEmSNE8s3rQmSd6S5C9WLK72JkkTk+QNSV42g3aekeTUabczRhzrk1yfxL/V0iqZL3Z4PWMf\ngE/yq0kuTvK9JA9YS7s7oi+f/az5B0G9lWSnrmOQNH3j/gGuqv9RVX85xvqWkvz2ZKJbva0c1JI0\nAeaLqVvNAfi/AZ5TVbepqrOmGJNGWLxpLEn2axPcVUm+kORXkvwO8FTghe1Rl/ePvOVBSc5K8p0k\nxyW5xci6HpfkzHZd/5nk/iPPXZTkhUk+D3zPI87ScEzzgMsqc4Fn/qWeM18MW5IAdwPO3cH3r1u5\nvnad2g53jLVdSW4OnAh8CPhvwPOA/wsstf++qj3qcsTyW4AnA48G7gEcADyjXdeDgDcDzwZ2A/4Z\nOKFtY9mvA48Bbl9V109z2yStzRYOuPxiktPagzNnJnnYyGufkeQrSb6b5KtJnppkX+CfgJ9vDwJd\n2b72LW23pw8m+T7w8JVHqJMc0bZxdZILkjw6yV8BDwVe167v79vX7pvkI0m+neS8JE8eWc8dk5zQ\n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\njrGKt63YkxsP13kJcFBVfQL4xPbenGTxLjCUFkBV9WHOlR3OT+YmjcP/J8PUg/zkvtMC6un3dr+e\nxrWQVpOb1jLa5Jq/8K4v+Nve7eUvf3nnMRijMQ4pxh5ZUzBdf47+/3Kb3e7J33piMPtOs/x/Muv/\nk26bbfWpvdVaS/F2KSNzQ7T3tzT5niTNmvlJUh+ZmyStyVqKt9OB+yRZ384N8RTghNWsYOPGjSwt\nLa0hBEl9sLS0xMaNG7sOY9Sa8pO5SZofPctP7jtJAtaQm8Y8nXcszYzvP6bpq31Uu/wxNKMmXQC8\nZJWnCKvvTjnllK5D2C5jnAxjnIz2dz3Trg2Tzk9DyE3TMIT/X5O2iNtctbjbPev8NPR9p1n+P5n1\n/0m3zbb61N5qc9NYUwVMQ5Lqqm1J05GE6n5AgDUxN0nzyfwkqY9Wm5vW0m1yzTz1L82HnnVLWjNz\nkzQ/zE+S+mhHc5Nn3iRNjEe2JfWV+UlSHw3qzJskSZIkaTx2m5S0ZnZLktRX5idJfWS3SUmds1uS\npL4yP0nqI7tNSpIkSdIcstukpDWzW5KkvjI/Seoju01K6pzdkiT1lflJUh/ZbVKSJEmS5pDFmyRJ\nkiQNgNe8SVozrymR1FfmJ0l95DVvkjrnNSWS+sr8JKmPvOZNkiRJkuaQxZskSZIkDYDFmyRJkiQN\ngAOWSFozBwSQ1FfmJ0l95IAlkjrngACS+sr8JKmPHLBEkiRJkuaQxZskSZIkDYDFmyRJkiQNgMWb\nJEmSJA2AxZskSZIkDYBTBUhaM4filtRX5idJfeRUAZI651DckvrK/CSpj5wqQJIkSZLmkMWbJEmS\nJA2AxZskSZIkDYDFmyRJkiQNgMWbJEmSJA2AxZskSZIkDYDFmyRJkiQNgJN0S1ozJ8GV1FfmJ0l9\n5CTdkjrnJLiS+sr8JKmPnKRbkiRJkuaQxZskSZIkDYDFmyRJkiQNgMWbJEmSJA2AxZskSZIkDYDF\nmyRJkiQNwE5dNn7yySdPdH13vvOdeeADHzjRdUqSJElSH3Q6z9vtbvfIia3v2ms38dCH3psPfej4\nia1T0uo4j5KkvjI/Seqj1eamTs+8XX31JM+8Hc91171jguuTJElaPMn0a1yLUGnHTKV4S3IE8Fjg\ntsCbq+oj02hHklbD3CSpj/qZm6ZZXA36BKjUqakUb1X1fuD9SW4P/A3QgyQkadGZmyT1kblJ0rjG\n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\n5WaOoZf8EiYV74JJxa22OPZNUp9ErX9uEZFjGTa3yJ57Hs4113ySSZRdxITKnlS5pWwPYjQNEUFm\nTvaIfMImlZvgpcCf02Jummzjzbyn6TA/reQkjjlmKyeffNIEypa0ktXmpvV0m5QkSZIkTYmNN0mS\nJElqwHqWChiDAS2OK5G0vf6NKRlgbrrVpMemSZPUv/wkaSNzzNuqOeZNWo5jSlbS7pi39mIuZZv3\nNMz8tBLHvEm1OOZNkiRJknrIxpskSVIzBsD82Et9/etfTURM7E/S9ubn59e0SLdj3iStW//GlAww\nN0n90M/8NCmT7CItadjc3Bxzc3Ns3rx5Va9zzNuqtTmuxLEfmgbHlKzEMW/TLtu8p2Hmp5WcBPwJ\n7o/S9DnmTZIkSZJ6yMabJEmSJDXAxpskSZIkNcDGmyRJkiQ1wNkmJa1bP2dzm8PcJLWvf/lJ0kbm\nbJOr1uaMbs7ypGlwNreVONvktMs272mY+WklzjYp1eJsk5IkSZLUQzbeJEmSKoqIAyPizRHxD7Vj\nkTTbbLxJkiRVlJlfzsxn1I5D0uyz8SZJkjRmEXFqRGyLiAsXbd8UEZdExKURcWyt+CS1ydkmJa1b\n/2ZzG2BukvqhYn46DXgd8LaFDRGxM3AycARwOfCpiPhAZl5cI0BJ7XG2yVVrc0Y3Z3nSNDib20qc\nbXLaZZv3NKxGfoqIA4APZuYh3f3DgeMzc1N3/4XdU98IvAL4ReDNmfnKZcpztkmpZ1abmypfeZMk\nSdow9gW2DN3fChyWmVcBfzBaEYOh23O00kMgYrLtZhuHasV6ewPYeJMkSZqOMbQwBusvoopJNq6a\n7vChDWZubo65ublb7m/evHlVr3fCEkmSpOm4HNhv6P5+lKtvkjQSr7xJkiRNx6eBg7qxcFcARwFP\nXl0RA1rqLilpaWvtPumVN0mSpDGLiNOB84GDI2JLRPxOZt4EPAc4G7gIeOfqZ5ocYMNNat/c3ByD\nwWDVr/PKmyRJ0phl5pJX1DLzLOCsKYcjqSdc503SurnOm6RZZX6SNIvWmptc523V2lxLySl0NQ2u\n87YS13mbdtnmPQ0zP61k8uu8TXq2Sfd3tWq1uckxb5IkSZLUAMe8SZIkNWOA3Sal9tltsmO3yaXL\ntjuBpsFuSSux2+S0yzbvaZj5aSV2m5RqsdukJEmSJPWQ3SYlSZKaMcBuk1L77DbZsdvk0mXbnUDT\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x172a8c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hide_me\n",
    "%pylab inline\n",
    "\n",
    "data_to_test = featureFormat(data_dict, features_to_test)\n",
    "fig = plt.figure(figsize=(15, 30))\n",
    "\n",
    "for idx, feature in enumerate(features_to_test):\n",
    "    ax = plt.subplot(7,3, idx+1)\n",
    "    plt.title(feature)\n",
    "    plt.xticks(rotation='vertical')\n",
    "    plt.gca().set_yscale(\"log\")\n",
    "    plt.subplots_adjust(hspace=.6) \n",
    "    ax.hist(data_to_test[:,idx])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking much better now!\n",
    "\n",
    "There are still some suspicious values on `exercised_stock_options`, `loan_advances`, `other`, `restricted_stock`, and `restricted_stock_deferred`. Let's get 5 largest values off them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 largest exercised_stock_options\n",
      "['LAY KENNETH L(poi): 34348384', 'HIRKO JOSEPH(poi): 30766064', 'RICE KENNETH D(poi): 19794175', 'SKILLING JEFFREY K(poi): 19250000', 'PAI LOU L(not poi): 15364167']\n",
      "5 largest loan_advances\n",
      "['LAY KENNETH L(poi): 81525000', 'FREVERT MARK A(not poi): 2000000', 'PICKERING MARK R(not poi): 400000', 'METTS MARK(not poi): NaN', 'BAXTER JOHN C(not poi): NaN']\n",
      "5 largest other\n",
      "['LAY KENNETH L(poi): 10359729', 'FREVERT MARK A(not poi): 7427621', 'MARTIN AMANDA K(not poi): 2818454', 'BAXTER JOHN C(not poi): 2660303', 'SHERRIFF JOHN R(not poi): 1852186']\n",
      "5 largest restricted_stock\n",
      "['LAY KENNETH L(poi): 14761694', 'WHITE JR THOMAS E(not poi): 13847074', 'PAI LOU L(not poi): 8453763', 'SKILLING JEFFREY K(poi): 6843672', 'FREVERT MARK A(not poi): 4188667']\n",
      "5 largest restricted_stock_deferred\n",
      "['BHATNAGAR SANJAY(not poi): 15456290', 'BELFER ROBERT(not poi): 44093', 'METTS MARK(not poi): NaN', 'BAXTER JOHN C(not poi): NaN', 'ELLIOTT STEVEN(not poi): NaN']\n"
     ]
    }
   ],
   "source": [
    "hide_me\n",
    "show_largest_five(data_dict, features_to_test, 'exercised_stock_options')\n",
    "show_largest_five(data_dict, features_to_test, 'loan_advances')\n",
    "show_largest_five(data_dict, features_to_test, 'other')\n",
    "show_largest_five(data_dict, features_to_test, 'restricted_stock')\n",
    "show_largest_five(data_dict, features_to_test, 'restricted_stock_deferred')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Except for `restricted_stock_deferred`, they looked normal enough to use in our classifiers, as we can see that the largest values belongs to a POI.\n",
    "- We can't use `restricted_stock_deferred` anyway for lack of data values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection\n",
    "Digging through the dataset, we found that there seems to be a correlation between being a POI and some features, as seen in below correlation matrix."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![caption](figure/corrplot-1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Result of Initial Feature Selection\n",
    "To sum up, here are the features we are going to use (i.e. features with high correlation to poi and have sufficient number of data points):\n",
    "`bonus, exercised_stock_options, expenses, total_payments, total_stock_value, from_poi_to_this_person, from_this_person_to_poi, long_term_incentive, other, restricted_stock, salary, shared_receipt_with_poi, to_messages`.\n",
    "\n",
    "Note that in practice many trial and errors happened during testing these variables. I had to try out different set of features to find out what was the smallest correlation value we can accept in our model that doesn't hurt prediction quality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hide_me\n",
    "features_string = '''poi, bonus, exercised_stock_options, expenses, total_payments, \n",
    "                  total_stock_value, from_poi_to_this_person, from_this_person_to_poi, \n",
    "                  long_term_incentive, other, restricted_stock, salary, shared_receipt_with_poi, to_messages'''\n",
    "\n",
    "features_list = [x.strip() for x in features_string.split(',')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting Up Classifier\n",
    "Before trying out engineering new features, let us first focus on getting our classifier up and running. The reasons are:\n",
    "1. Getting prediction model to run takes less effort than building new features.\n",
    "2. When we have our classifier ready, we can use it to test our new features and see if they improved the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('features', FeatureUnion(n_jobs=1,\n",
      "       transformer_list=[('imputer', Imputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)), ('scale', MinMaxScaler(copy=True, feature_range=(0, 1)))],\n",
      "       transformer_weights=None)), ('classify', DecisionTreeClassifier(class_weigh...  min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=13, splitter='best'))])\n",
      "\tAccuracy: 0.79940\tPrecision: 0.23765\tRecall: 0.22850\tF1: 0.23298\tF2: 0.23027\n",
      "\tTotal predictions: 15000\tTrue positives:  457\tFalse positives: 1466\tFalse negatives: 1543\tTrue negatives: 11534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "### For our initial prediction model, we will use AdaBoost that we will later optimize\n",
    "### with GridSearchCV\n",
    "\n",
    "random = 13\n",
    "import copy\n",
    "\n",
    "my_dataset = copy.deepcopy(data_dict)\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.pipeline import Pipeline, FeatureUnion\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "combined_features = FeatureUnion([\n",
    "        (\"imputer\", Imputer(axis=0, missing_values=\"NaN\")),\n",
    "        ('scale', MinMaxScaler())\n",
    "    ])\n",
    "\n",
    "estimators = [\n",
    "    ('features', combined_features),\n",
    "    ('classify', DecisionTreeClassifier(random_state=random))\n",
    "]\n",
    "\n",
    "pclf = Pipeline(estimators)\n",
    "\n",
    "test_classifier(pclf, my_dataset, features_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Engineering\n",
    "Let's try to create new feature(s) and see if that improves our precision and recall store.\n",
    "\n",
    "### Salary and Director Fees\n",
    "The existence of both Salary and Director Fees is suspicious. When a person has a salary, would he still get director fees? Below I list all data points that contain `director_fees`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "hide_me\n",
    "df = to_pandas(my_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>salary</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>poi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BELFER ROBERT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3285</td>\n",
       "      <td>102500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>BHATNAGAR SANJAY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>137864</td>\n",
       "      <td>15456290</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>BLAKE JR. NORMAN P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>113784</td>\n",
       "      <td>1279</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>CHAN RONNIE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>98784</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>DUNCAN JOHN H</td>\n",
       "      <td>NaN</td>\n",
       "      <td>102492</td>\n",
       "      <td>77492</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>GRAMM WENDY L</td>\n",
       "      <td>NaN</td>\n",
       "      <td>119292</td>\n",
       "      <td>119292</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>JAEDICKE ROBERT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>108750</td>\n",
       "      <td>83750</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>LEMAISTRE CHARLES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>112492</td>\n",
       "      <td>87492</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>MENDELSOHN JOHN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103750</td>\n",
       "      <td>148</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>MEYER JEROME J</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38346</td>\n",
       "      <td>2151</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>PEREIRA PAULO V. FERRAZ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101250</td>\n",
       "      <td>27942</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>POWERS WILLIAM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>SAVAGE FRANK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>125034</td>\n",
       "      <td>3750</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>URQUHART JOHN A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36666</td>\n",
       "      <td>228656</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>WAKEHAM JOHN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109298</td>\n",
       "      <td>213071</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>WINOKUR JR. HERBERT S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>108579</td>\n",
       "      <td>84992</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        name  salary  director_fees  total_payments  poi\n",
       "8    BELFER ROBERT           NaN      3285           102500          0  \n",
       "11   BHATNAGAR SANJAY        NaN      137864         15456290        0  \n",
       "14   BLAKE JR. NORMAN P      NaN      113784         1279            0  \n",
       "23   CHAN RONNIE             NaN      98784         NaN              0  \n",
       "38   DUNCAN JOHN H           NaN      102492         77492           0  \n",
       "56   GRAMM WENDY L           NaN      119292         119292          0  \n",
       "71   JAEDICKE ROBERT         NaN      108750         83750           0  \n",
       "81   LEMAISTRE CHARLES       NaN      112492         87492           0  \n",
       "92   MENDELSOHN JOHN         NaN      103750         148             0  \n",
       "94   MEYER JEROME J          NaN      38346          2151            0  \n",
       "104  PEREIRA PAULO V. FERRAZ NaN      101250         27942           0  \n",
       "108  POWERS WILLIAM          NaN      17500         NaN              0  \n",
       "114  SAVAGE FRANK            NaN      125034         3750            0  \n",
       "131  URQUHART JOHN A         NaN      36666          228656          0  \n",
       "132  WAKEHAM JOHN            NaN      109298         213071          0  \n",
       "140  WINOKUR JR. HERBERT S   NaN      108579         84992           0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "df.ix[df['director_fees'].notnull(),['name','salary', 'director_fees', 'total_payments', 'poi']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On the opposite side, we want to see if there are people having both salary and director fees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>salary</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>poi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [name, salary, director_fees, poi]\n",
       "Index: []"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "df.ix[df['salary'].notnull() & df['director_fees'].notnull(),['name','salary', 'director_fees', 'poi']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aha! Looks like we can combine `salary` and `director_fees` into another feature. Looks like a person could only either get `salary` or `director_fees` but not both.\n",
    "\n",
    "Let's see other data points where both `salary` and `director_fees` are null, maybe we can complete them. Let's include other fields with many missing values: `deferral_payments`, `deferred_income`, `loan_advances`, `restricted_stock_deferred`, `long_term_incentive`, and as well we want to see if `total_payments` can be used here:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>salary</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>deferral_payments</th>\n",
       "      <th>deferred_income</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <th>long_term_incentive</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>poi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BADUM JAMES P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>178980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>182466</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>BROWN MICHAEL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49288</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>CHRISTODOULOU DIOMEDES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>CLINE KENNETH W</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-472568</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>CORDES WILLIAM R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>FOWLER PEGGY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>FOY JOE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>181755</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>181755</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>FUGH JOHN L</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50591</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50591</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>GATHMANN WILLIAM D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-72419</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>GIBBS DANA R</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>504610</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>461912</td>\n",
       "      <td>966522</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>GILLIS JOHN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>HAUG DAVID L</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>475</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>HAYES ROBERT E</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7961</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7961</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>HAYSLETT RODERICK J</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>HIRKO JOSEPH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10259</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91093</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>HORTON STANLEY C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3131860</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3131860</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>HUGHES JAMES A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>LEWIS RICHARD</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>LOCKHART EUGENE E</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>LOWRY CHARLES P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-153686</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>MCCARTY DANNY J</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>MCDONALD REBECCA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>MEYER ROCKFORD G</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1848227</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1848227</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>MORAN MICHAEL P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>NOLES JAMES L</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>774401</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-94556</td>\n",
       "      <td>NaN</td>\n",
       "      <td>774401</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>PIRO JIM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>PRENTICE JAMES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>564348</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>564348</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>SCRIMSHAW MATTHEW</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>SHERRICK JEFFREY B</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>THE TRAVEL AGENCY IN THE PARK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>362096</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>WALTERS GARETH W</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>53625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87410</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>WHALEY DAVID A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>WODRASKA JOHN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>189583</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>WROBEL BRUCE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>YEAP SOON</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55097</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  salary  director_fees  deferral_payments  \\\n",
       "1    BADUM JAMES P                 NaN     NaN             178980              \n",
       "16   BROWN MICHAEL                 NaN     NaN            NaN                  \n",
       "24   CHRISTODOULOU DIOMEDES        NaN     NaN            NaN                  \n",
       "25   CLINE KENNETH W               NaN     NaN            NaN                  \n",
       "27   CORDES WILLIAM R              NaN     NaN            NaN                  \n",
       "45   FOWLER PEGGY                  NaN     NaN            NaN                  \n",
       "46   FOY JOE                       NaN     NaN             181755              \n",
       "48   FUGH JOHN L                   NaN     NaN             50591               \n",
       "51   GATHMANN WILLIAM D            NaN     NaN            NaN                  \n",
       "52   GIBBS DANA R                  NaN     NaN             504610              \n",
       "53   GILLIS JOHN                   NaN     NaN            NaN                  \n",
       "60   HAUG DAVID L                  NaN     NaN            NaN                  \n",
       "61   HAYES ROBERT E                NaN     NaN             7961                \n",
       "62   HAYSLETT RODERICK J           NaN     NaN            NaN                  \n",
       "65   HIRKO JOSEPH                  NaN     NaN             10259               \n",
       "66   HORTON STANLEY C              NaN     NaN             3131860             \n",
       "67   HUGHES JAMES A                NaN     NaN            NaN                  \n",
       "82   LEWIS RICHARD                 NaN     NaN            NaN                  \n",
       "84   LOCKHART EUGENE E             NaN     NaN            NaN                  \n",
       "85   LOWRY CHARLES P               NaN     NaN            NaN                  \n",
       "87   MCCARTY DANNY J               NaN     NaN            NaN                  \n",
       "90   MCDONALD REBECCA              NaN     NaN            NaN                  \n",
       "95   MEYER ROCKFORD G              NaN     NaN             1848227             \n",
       "96   MORAN MICHAEL P               NaN     NaN            NaN                  \n",
       "100  NOLES JAMES L                 NaN     NaN             774401              \n",
       "107  PIRO JIM                      NaN     NaN            NaN                  \n",
       "109  PRENTICE JAMES                NaN     NaN             564348              \n",
       "115  SCRIMSHAW MATTHEW             NaN     NaN            NaN                  \n",
       "120  SHERRICK JEFFREY B            NaN     NaN            NaN                  \n",
       "127  THE TRAVEL AGENCY IN THE PARK NaN     NaN            NaN                  \n",
       "134  WALTERS GARETH W              NaN     NaN             53625               \n",
       "137  WHALEY DAVID A                NaN     NaN            NaN                  \n",
       "141  WODRASKA JOHN                 NaN     NaN            NaN                  \n",
       "142  WROBEL BRUCE                  NaN     NaN            NaN                  \n",
       "144  YEAP SOON                     NaN     NaN            NaN                  \n",
       "\n",
       "     deferred_income  loan_advances  restricted_stock_deferred  \\\n",
       "1   NaN              NaN            NaN                          \n",
       "16  NaN              NaN            NaN                          \n",
       "24  NaN              NaN            NaN                          \n",
       "25  NaN              NaN            -472568                      \n",
       "27  NaN              NaN            NaN                          \n",
       "45  NaN              NaN            NaN                          \n",
       "46  NaN              NaN            NaN                          \n",
       "48  NaN              NaN            NaN                          \n",
       "51  NaN              NaN            -72419                       \n",
       "52  NaN              NaN            NaN                          \n",
       "53  NaN              NaN            NaN                          \n",
       "60  NaN              NaN            NaN                          \n",
       "61  NaN              NaN            NaN                          \n",
       "62  NaN              NaN            NaN                          \n",
       "65  NaN              NaN            NaN                          \n",
       "66  NaN              NaN            NaN                          \n",
       "67  NaN              NaN            NaN                          \n",
       "82  NaN              NaN            NaN                          \n",
       "84  NaN              NaN            NaN                          \n",
       "85  NaN              NaN            -153686                      \n",
       "87  NaN              NaN            NaN                          \n",
       "90  NaN              NaN            NaN                          \n",
       "95  NaN              NaN            NaN                          \n",
       "96  NaN              NaN            NaN                          \n",
       "100 NaN              NaN            -94556                       \n",
       "107 NaN              NaN            NaN                          \n",
       "109 NaN              NaN            NaN                          \n",
       "115 NaN              NaN            NaN                          \n",
       "120 NaN              NaN            NaN                          \n",
       "127 NaN              NaN            NaN                          \n",
       "134 NaN              NaN            NaN                          \n",
       "137 NaN              NaN            NaN                          \n",
       "141 NaN              NaN            NaN                          \n",
       "142 NaN              NaN            NaN                          \n",
       "144 NaN              NaN            NaN                          \n",
       "\n",
       "     long_term_incentive  total_payments  poi  \n",
       "1   NaN                   182466          0    \n",
       "16  NaN                   49288           0    \n",
       "24  NaN                  NaN              0    \n",
       "25  NaN                  NaN              0    \n",
       "27  NaN                  NaN              0    \n",
       "45  NaN                  NaN              0    \n",
       "46  NaN                   181755          0    \n",
       "48  NaN                   50591           0    \n",
       "51  NaN                  NaN              0    \n",
       "52   461912               966522          0    \n",
       "53  NaN                  NaN              0    \n",
       "60  NaN                   475             0    \n",
       "61  NaN                   7961            0    \n",
       "62  NaN                  NaN              0    \n",
       "65  NaN                   91093           1    \n",
       "66  NaN                   3131860         0    \n",
       "67  NaN                  NaN              0    \n",
       "82  NaN                  NaN              0    \n",
       "84  NaN                  NaN              0    \n",
       "85  NaN                  NaN              0    \n",
       "87  NaN                  NaN              0    \n",
       "90  NaN                  NaN              0    \n",
       "95  NaN                   1848227         0    \n",
       "96  NaN                  NaN              0    \n",
       "100 NaN                   774401          0    \n",
       "107 NaN                  NaN              0    \n",
       "109 NaN                   564348          0    \n",
       "115 NaN                  NaN              0    \n",
       "120 NaN                  NaN              0    \n",
       "127 NaN                   362096          0    \n",
       "134 NaN                   87410           0    \n",
       "137 NaN                  NaN              0    \n",
       "141 NaN                   189583          0    \n",
       "142 NaN                  NaN              0    \n",
       "144 NaN                   55097           0    "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "df.ix[df['salary'].isnull() & df['director_fees'].isnull(),['name', 'salary', 'director_fees', 'deferral_payments',\n",
    "                                                            'deferred_income', 'loan_advances', 'restricted_stock_deferred',\n",
    "                                                            'long_term_incentive', 'total_payments', 'poi']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An interesting pattern shows up. It seems like `total_payments` might be the combination of several other fields, as in the case of *GIBBS DANA R*. Below let's combine multiple fields and compare them with `total_payments` to test out this hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 name  combined  total_payments equals?  poi\n",
      "0  ALLEN PHILLIP K     4484442   4484442         True    0  \n",
      "1  BADUM JAMES P       182466    182466          True    0  \n",
      "2  BANNANTINE JAMES M  916197    916197          True    0  \n",
      "3  BAXTER JOHN C       5634343   5634343         True    0  \n",
      "4  BAY FRANKLIN R      827696    827696          True    0  \n",
      "143  out of  145\n",
      "Total difference between combined and total_payments:  15382277.0\n",
      "\n",
      "\n",
      "Which data points are different?\n",
      "                name  combined  total_payments equals?  poi\n",
      "8   BELFER ROBERT    -99215     102500          False   0  \n",
      "11  BHATNAGAR SANJAY  275728    15456290        False   0  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>bonus</th>\n",
       "      <th>deferral_payments</th>\n",
       "      <th>deferred_income</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>email_address</th>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <th>expenses</th>\n",
       "      <th>from_messages</th>\n",
       "      <th>from_poi_to_this_person</th>\n",
       "      <th>from_this_person_to_poi</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>long_term_incentive</th>\n",
       "      <th>other</th>\n",
       "      <th>poi</th>\n",
       "      <th>restricted_stock</th>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <th>salary</th>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <th>to_messages</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>total_stock_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BELFER ROBERT</td>\n",
       "      <td>0</td>\n",
       "      <td>-102500</td>\n",
       "      <td>0</td>\n",
       "      <td>3285</td>\n",
       "      <td>0</td>\n",
       "      <td>3285</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>44093</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>102500</td>\n",
       "      <td>-44093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>BHATNAGAR SANJAY</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137864</td>\n",
       "      <td>0</td>\n",
       "      <td>2604490</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137864</td>\n",
       "      <td>0</td>\n",
       "      <td>-2604490</td>\n",
       "      <td>15456290</td>\n",
       "      <td>0</td>\n",
       "      <td>463</td>\n",
       "      <td>523</td>\n",
       "      <td>15456290</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                name  bonus  deferral_payments  deferred_income  \\\n",
       "8   BELFER ROBERT     0     -102500             0                 \n",
       "11  BHATNAGAR SANJAY  0      0                  0                 \n",
       "\n",
       "    director_fees  email_address  exercised_stock_options  expenses  \\\n",
       "8   3285           0              3285                     0          \n",
       "11  137864         0              2604490                  0          \n",
       "\n",
       "    from_messages  from_poi_to_this_person  from_this_person_to_poi  \\\n",
       "8   0              0                        0                         \n",
       "11  29             0                        1                         \n",
       "\n",
       "    loan_advances  long_term_incentive   other  poi  restricted_stock  \\\n",
       "8   0              0                    0       0    0                  \n",
       "11  0              0                    137864  0   -2604490            \n",
       "\n",
       "    restricted_stock_deferred  salary  shared_receipt_with_poi  to_messages  \\\n",
       "8   44093                      0       0                        0             \n",
       "11  15456290                   0       463                      523           \n",
       "\n",
       "    total_payments  total_stock_value  \n",
       "8   102500         -44093              \n",
       "11  15456290        0                  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dataframe to check total_payments\n",
    "df2 = pd.DataFrame()\n",
    "\n",
    "df = df.fillna(0)\n",
    "df2['name'] = df['name']\n",
    "df2['combined'] = (\n",
    "    df['bonus'] + \n",
    "    df['director_fees'] +\n",
    "    df['deferral_payments'] +\n",
    "    df['deferred_income'] +\n",
    "    df['loan_advances'] +\n",
    "    df['long_term_incentive'] +\n",
    "    df['expenses'] +\n",
    "    df['other'] +\n",
    "    df['salary']\n",
    ")\n",
    "df2['total_payments'] = df['total_payments']\n",
    "df2['equals?'] = (df2['combined'] == df2['total_payments'])\n",
    "df2['poi'] = df['poi']\n",
    "print df2.head(5)\n",
    "print np.sum(df2['equals?']), \" out of \", len(df2)\n",
    "print \"Total difference between combined and total_payments: \", (np.sum(df2['total_payments']) - np.sum(df2['combined']))\n",
    "print \"\\n\"\n",
    "print \"Which data points are different?\"\n",
    "print df2[df2['equals?'] == False]\n",
    "df[df['name'].isin(df2[df2['equals?'] == False]['name'].tolist())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are close to confirming where `total_payments` values come from, with possibility in replacing many other features with it. There are however 2 anomalies, \"BELFER ROBERT\" and \"BHATNAGAR SANJAY\". If you still remember \"BHATNAGAR SANJAY\" also has anomaly in `restricted_stock_deferred` above.\n",
    "\n",
    "Before we dig deeper into these two let's look into combining stock values with similar technique above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 name  combined  total_stock_value equals?  poi\n",
      "0  ALLEN PHILLIP K     1729541   1729541            True    0  \n",
      "1  BADUM JAMES P       257817    257817             True    0  \n",
      "2  BANNANTINE JAMES M  5243487   5243487            True    0  \n",
      "3  BAXTER JOHN C       10623258  10623258           True    0  \n",
      "4  BAY FRANKLIN R      63014     63014              True    0  \n",
      "143  out of  145\n",
      "Total difference between combined and total_stock_value:  -15547761.0\n",
      "\n",
      "\n",
      "Which data points are different?\n",
      "                name  combined  total_stock_value equals?  poi\n",
      "8   BELFER ROBERT     47378    -44093              False   0  \n",
      "11  BHATNAGAR SANJAY  15456290  0                  False   0  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>bonus</th>\n",
       "      <th>deferral_payments</th>\n",
       "      <th>deferred_income</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>email_address</th>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <th>expenses</th>\n",
       "      <th>from_messages</th>\n",
       "      <th>from_poi_to_this_person</th>\n",
       "      <th>from_this_person_to_poi</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>long_term_incentive</th>\n",
       "      <th>other</th>\n",
       "      <th>poi</th>\n",
       "      <th>restricted_stock</th>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <th>salary</th>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <th>to_messages</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>total_stock_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BELFER ROBERT</td>\n",
       "      <td>0</td>\n",
       "      <td>-102500</td>\n",
       "      <td>0</td>\n",
       "      <td>3285</td>\n",
       "      <td>0</td>\n",
       "      <td>3285</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>44093</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>102500</td>\n",
       "      <td>-44093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>BHATNAGAR SANJAY</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137864</td>\n",
       "      <td>0</td>\n",
       "      <td>2604490</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137864</td>\n",
       "      <td>0</td>\n",
       "      <td>-2604490</td>\n",
       "      <td>15456290</td>\n",
       "      <td>0</td>\n",
       "      <td>463</td>\n",
       "      <td>523</td>\n",
       "      <td>15456290</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                name  bonus  deferral_payments  deferred_income  \\\n",
       "8   BELFER ROBERT     0     -102500             0                 \n",
       "11  BHATNAGAR SANJAY  0      0                  0                 \n",
       "\n",
       "    director_fees  email_address  exercised_stock_options  expenses  \\\n",
       "8   3285           0              3285                     0          \n",
       "11  137864         0              2604490                  0          \n",
       "\n",
       "    from_messages  from_poi_to_this_person  from_this_person_to_poi  \\\n",
       "8   0              0                        0                         \n",
       "11  29             0                        1                         \n",
       "\n",
       "    loan_advances  long_term_incentive   other  poi  restricted_stock  \\\n",
       "8   0              0                    0       0    0                  \n",
       "11  0              0                    137864  0   -2604490            \n",
       "\n",
       "    restricted_stock_deferred  salary  shared_receipt_with_poi  to_messages  \\\n",
       "8   44093                      0       0                        0             \n",
       "11  15456290                   0       463                      523           \n",
       "\n",
       "    total_payments  total_stock_value  \n",
       "8   102500         -44093              \n",
       "11  15456290        0                  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dataframe to check total_stock_value\n",
    "df3 = pd.DataFrame()\n",
    "\n",
    "df = df.fillna(0)\n",
    "df3['name'] = df['name']\n",
    "df3['combined'] = (\n",
    "    df['restricted_stock'] +\n",
    "    df['exercised_stock_options'] +\n",
    "    df['restricted_stock_deferred']\n",
    ")\n",
    "df3['total_stock_value'] = df['total_stock_value']\n",
    "df3['equals?'] = (df3['combined'] == df3['total_stock_value'])\n",
    "df3['poi'] = df['poi']\n",
    "print df3.head(5)\n",
    "print np.sum(df3['equals?']), \" out of \", len(df3)\n",
    "print \"Total difference between combined and total_stock_value: \", (np.sum(df3['total_stock_value']) - np.sum(df3['combined']))\n",
    "print \"\\n\"\n",
    "print \"Which data points are different?\"\n",
    "print df3[df3['equals?'] == False]\n",
    "df[df['name'].isin(df3[df3['equals?'] == False]['name'].tolist())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How interesting was that! Since with above formulas (to calculate `total_payments` and `total_stock_value`) we ended up with majority of correct data points, we can be very sure that the formulas are correct.\n",
    "\n",
    "Applying the formula, we then ended up with both same outliers, \"BELFER ROBERT\" and \"BHATNAGAR SANJAY\"! We may now either **ignore** these outliers, or try to fix their values.\n",
    "\n",
    "Luckily we have `enron61702insiderpay.pdf` to compare and fix our dataset with. Below is the updated \"BELFER ROBERT\" and \"BHATNAGAR SANJAY\" data points from that report:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>bonus</th>\n",
       "      <th>deferral_payments</th>\n",
       "      <th>deferred_income</th>\n",
       "      <th>director_fees</th>\n",
       "      <th>email_address</th>\n",
       "      <th>exercised_stock_options</th>\n",
       "      <th>expenses</th>\n",
       "      <th>from_messages</th>\n",
       "      <th>from_poi_to_this_person</th>\n",
       "      <th>from_this_person_to_poi</th>\n",
       "      <th>loan_advances</th>\n",
       "      <th>long_term_incentive</th>\n",
       "      <th>other</th>\n",
       "      <th>poi</th>\n",
       "      <th>restricted_stock</th>\n",
       "      <th>restricted_stock_deferred</th>\n",
       "      <th>salary</th>\n",
       "      <th>shared_receipt_with_poi</th>\n",
       "      <th>to_messages</th>\n",
       "      <th>total_payments</th>\n",
       "      <th>total_stock_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BELFER ROBERT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-102500</td>\n",
       "      <td>102500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3285</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>44093</td>\n",
       "      <td>-44093</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3285</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>BHATNAGAR SANJAY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15456290</td>\n",
       "      <td>137864</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2604490</td>\n",
       "      <td>-2604490</td>\n",
       "      <td>NaN</td>\n",
       "      <td>463</td>\n",
       "      <td>523</td>\n",
       "      <td>137864</td>\n",
       "      <td>15456290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                name  bonus  deferral_payments  deferred_income  \\\n",
       "8   BELFER ROBERT    NaN    NaN                -102500            \n",
       "11  BHATNAGAR SANJAY NaN    NaN                NaN                \n",
       "\n",
       "    director_fees  email_address  exercised_stock_options  expenses  \\\n",
       "8   102500        NaN            NaN                       3285       \n",
       "11 NaN            NaN             15456290                 137864     \n",
       "\n",
       "    from_messages  from_poi_to_this_person  from_this_person_to_poi  \\\n",
       "8  NaN            NaN                      NaN                        \n",
       "11  29             0                        1                         \n",
       "\n",
       "    loan_advances  long_term_incentive  other  poi  restricted_stock  \\\n",
       "8  NaN            NaN                  NaN     0    44093              \n",
       "11 NaN            NaN                  NaN     0    2604490            \n",
       "\n",
       "    restricted_stock_deferred  salary  shared_receipt_with_poi  to_messages  \\\n",
       "8  -44093                     NaN     NaN                      NaN            \n",
       "11 -2604490                   NaN      463                      523           \n",
       "\n",
       "    total_payments  total_stock_value  \n",
       "8   3285           NaN                 \n",
       "11  137864          15456290           "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_me\n",
    "data_dict_updated = data_dict\n",
    "data_dict_updated['BELFER ROBERT']['deferred_income'] = -102500\n",
    "data_dict_updated['BELFER ROBERT']['deferral_payments'] = 'NaN'\n",
    "data_dict_updated['BELFER ROBERT']['expenses'] = 3285\n",
    "data_dict_updated['BELFER ROBERT']['director_fees'] = 102500\n",
    "data_dict_updated['BELFER ROBERT']['total_payments'] = 3285\n",
    "data_dict_updated['BELFER ROBERT']['exercised_stock_options'] = 'NaN'\n",
    "data_dict_updated['BELFER ROBERT']['restricted_stock'] = 44093\n",
    "data_dict_updated['BELFER ROBERT']['restricted_stock_deferred'] = -44093\n",
    "data_dict_updated['BELFER ROBERT']['total_stock_value'] = 'NaN'\n",
    "\n",
    "data_dict_updated['BHATNAGAR SANJAY']['other'] = 'NaN'\n",
    "data_dict_updated['BHATNAGAR SANJAY']['expenses'] = 137864\n",
    "data_dict_updated['BHATNAGAR SANJAY']['director_fees'] = 'NaN'\n",
    "data_dict_updated['BHATNAGAR SANJAY']['total_payments'] = 137864\n",
    "data_dict_updated['BHATNAGAR SANJAY']['exercised_stock_options'] = 15456290\n",
    "data_dict_updated['BHATNAGAR SANJAY']['restricted_stock'] = 2604490\n",
    "data_dict_updated['BHATNAGAR SANJAY']['restricted_stock_deferred'] = -2604490\n",
    "data_dict_updated['BHATNAGAR SANJAY']['total_stock_value'] = 15456290\n",
    "\n",
    "df_updated = to_pandas(data_dict_updated)\n",
    "\n",
    "df_updated[(df_updated['name'] == 'BELFER ROBERT') | (df_updated['name'] == 'BHATNAGAR SANJAY')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's run the calculation again and confirm if we have fixed the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PAYMENTS:\n",
      "\n",
      "145  out of  145\n",
      "Total difference between combined and total_payments:  0.0\n",
      "\n",
      "\n",
      "TOTAL STOCK VALUE:\n",
      "\n",
      "145  out of  145\n",
      "Total difference between combined and total_stock_value:  0.0\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "hide_me\n",
    "df2_updated = pd.DataFrame()\n",
    "df_updated = df_updated.fillna(0)\n",
    "df2_updated['name'] = df_updated['name']\n",
    "df2_updated['combined'] = (\n",
    "    df_updated['bonus'] + \n",
    "    df_updated['director_fees'] +\n",
    "    df_updated['deferral_payments'] +\n",
    "    df_updated['deferred_income'] +\n",
    "    df_updated['loan_advances'] +\n",
    "    df_updated['long_term_incentive'] +\n",
    "    df_updated['expenses'] +\n",
    "    df_updated['other'] +\n",
    "    df_updated['salary']\n",
    ")\n",
    "df2_updated['total_payments'] = df_updated['total_payments']\n",
    "df2_updated['equals?'] = (df2_updated['combined'] == df2_updated['total_payments'])\n",
    "df2_updated['poi'] = df_updated['poi']\n",
    "print \"PAYMENTS:\\n\"\n",
    "print np.sum(df2_updated['equals?']), \" out of \", len(df2_updated)\n",
    "print \"Total difference between combined and total_payments: \", (np.sum(df2_updated['total_payments']) - np.sum(df2_updated['combined']))\n",
    "print \"\\n\"\n",
    "\n",
    "df3_updated = pd.DataFrame()\n",
    "df_updated = df_updated.fillna(0)\n",
    "df3_updated['name'] = df_updated['name']\n",
    "df3_updated['combined'] = (\n",
    "    df_updated['restricted_stock'] +\n",
    "    df_updated['exercised_stock_options'] +\n",
    "    df_updated['restricted_stock_deferred']\n",
    ")\n",
    "df3_updated['total_stock_value'] = df_updated['total_stock_value']\n",
    "df3_updated['equals?'] = (df3_updated['combined'] == df3_updated['total_stock_value'])\n",
    "df3_updated['poi'] = df_updated['poi']\n",
    "print \"TOTAL STOCK VALUE:\\n\"\n",
    "print np.sum(df3_updated['equals?']), \" out of \", len(df3_updated)\n",
    "print \"Total difference between combined and total_stock_value: \", (np.sum(df3_updated['total_stock_value']) - np.sum(df3_updated['combined']))\n",
    "print \"\\n\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering: Conclusion\n",
    "Initially we wanted to see if we can combine `director_fees` and `salary` into a feature, but as we have seen from above analysis, they have been combined together alongside other relevant features into `total_payments`. There are also a group of features that are combined into `total_stock_value`.\n",
    "\n",
    "This means, instead of adding new features, we need to remove `total_payments` and `total_stock_value` from our feature list, since they do not add any new information.\n",
    "\n",
    "And sure enough, once we removed them, there's an increase in our model's Recall score as we will see below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Is it better to replace NaN values with 0 or keep them?\n",
    "By keeping NaN values, they will be replaced with insignificant values (i.e. imputed) in our `imputer` step, but one could argue that 0 values here are needed since they add information about the dataset. We can confirm that they are useful since we can prove that by changing them to 0 `total_payments` and `total_stock_value` calculations returned correct values as seen previously.\n",
    "\n",
    "Let's try both. This one is keeping all NaN values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('features', FeatureUnion(n_jobs=1,\n",
      "       transformer_list=[('scale', MinMaxScaler(copy=True, feature_range=(0, 1)))],\n",
      "       transformer_weights=None)), ('classify', DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
      "            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n",
      "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=13, splitter='best'))])\n",
      "\tAccuracy: 0.80827\tPrecision: 0.25881\tRecall: 0.23500\tF1: 0.24633\tF2: 0.23941\n",
      "\tTotal predictions: 15000\tTrue positives:  470\tFalse positives: 1346\tFalse negatives: 1530\tTrue negatives: 11654\n",
      "\n",
      "Wall time: 1.97 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "hide_me\n",
    "### Keeping all NaN values\n",
    "\n",
    "features_list_updated = [\n",
    "    'poi',\n",
    "    'bonus',\n",
    "    'salary',\n",
    "    'deferral_payments',\n",
    "    'deferred_income',\n",
    "    'director_fees',\n",
    "    'exercised_stock_options',\n",
    "    'expenses',\n",
    "    'from_messages',\n",
    "    'from_poi_to_this_person',\n",
    "    'from_this_person_to_poi',\n",
    "    'loan_advances',\n",
    "    'long_term_incentive',\n",
    "    'other',\n",
    "    'restricted_stock',\n",
    "    'restricted_stock_deferred',\n",
    "    'salary',\n",
    "    'shared_receipt_with_poi',\n",
    "    'to_messages'\n",
    "]\n",
    "\n",
    "# Rebuilding the classifier\n",
    "pclf_updated = Pipeline(estimators)\n",
    "\n",
    "test_classifier(pclf_updated, data_dict_updated, features_list_updated)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And this is the result with NaN values replaced to 0:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('features', FeatureUnion(n_jobs=1,\n",
      "       transformer_list=[('scale', MinMaxScaler(copy=True, feature_range=(0, 1)))],\n",
      "       transformer_weights=None)), ('classify', DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
      "            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n",
      "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=13, splitter='best'))])\n",
      "\tAccuracy: 0.80827\tPrecision: 0.25881\tRecall: 0.23500\tF1: 0.24633\tF2: 0.23941\n",
      "\tTotal predictions: 15000\tTrue positives:  470\tFalse positives: 1346\tFalse negatives: 1530\tTrue negatives: 11654\n",
      "\n",
      "Wall time: 1.45 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "hide_me\n",
    "### Replacing NaN in total_payments and total_stock_value with 0\n",
    "data_dict_updated_zero = data_dict_updated\n",
    "for key, value in data_dict_updated_zero.items():\n",
    "    for item_key, item_value in value.items():\n",
    "        if value[item_key] == 'NaN':\n",
    "            data_dict_updated_zero[key][item_key] = 0\n",
    "\n",
    "# Rebuilding the classifier without imputer\n",
    "combined_features = FeatureUnion([\n",
    "        ('scale', MinMaxScaler())\n",
    "    ])\n",
    "\n",
    "estimators = [\n",
    "    ('features', combined_features),\n",
    "    ('classify', DecisionTreeClassifier(random_state=random))\n",
    "]\n",
    "\n",
    "pclf_updated_zero = Pipeline(estimators)\n",
    "\n",
    "test_classifier(pclf_updated_zero, data_dict_updated_zero, features_list_updated)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Testing this with different classifiers give different result, with AdaBoostClassifier the result quality reduced a bit, but increased a little with DecisionTreeClassifier. The runtime speed was however consistently improved by more than 10%.\n",
    "\n",
    "By simply replacing 'NaN' with 0, we managed to slim down our classifier by removing `imputer` step, without a high penalty."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Engineering: Second Attempt\n",
    "Since the rubric requires me to engineer my own feature, I will make another attempt at it in this section.\n",
    "\n",
    "I want to create two new features that are potentially useful:\n",
    "1. `from_this_person_to_poi_ratio`: Messages sent from this person to pois compared to all messages sent by this person.\n",
    "2. `from_poi_to_this_person_ratio`: Messages received by this person from pois compared to all messages received by this person.\n",
    "\n",
    "We will use the dataset which NaN values have been zero-ed in previous step as our base."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From This Person to POI Ratio\n",
      "count    145.000000\n",
      "mean     0.109164  \n",
      "std      0.185513  \n",
      "min      0.000000  \n",
      "25%      0.000000  \n",
      "50%      0.000000  \n",
      "75%      0.198436  \n",
      "max      1.000000  \n",
      "Name: from_this_person_to_poi_ratio, dtype: float64\n",
      "   poi  from_this_person_to_poi_ratio  from_this_person_to_poi  from_messages\n",
      "0  0    0.029613                       65                       2195         \n",
      "1  0    0.000000                       0                        0            \n",
      "2  0    0.000000                       0                        29           \n",
      "3  0    0.000000                       0                        0            \n",
      "4  0    0.000000                       0                        0            \n",
      "\n",
      "\n",
      "From POI to This Person Ratio\n",
      "count    145.000000\n",
      "mean     0.022516  \n",
      "std      0.036339  \n",
      "min      0.000000  \n",
      "25%      0.000000  \n",
      "50%      0.004885  \n",
      "75%      0.029817  \n",
      "max      0.217341  \n",
      "Name: from_poi_to_this_person_ratio, dtype: float64\n",
      "   poi  from_poi_to_this_person_ratio  from_poi_to_this_person  to_messages\n",
      "0  0    0.016196                       47                       2902       \n",
      "1  0    0.000000                       0                        0          \n",
      "2  0    0.068905                       39                       566        \n",
      "3  0    0.000000                       0                        0          \n",
      "4  0    0.000000                       0                        0          \n"
     ]
    }
   ],
   "source": [
    "### Create and display the new features we just created\n",
    "\n",
    "# fe stands for Feature Engineered, in case you wondered...\n",
    "data_dict_fe = data_dict_updated_zero\n",
    "\n",
    "for name, item in data_dict_fe.items():\n",
    "    data_dict_fe[name]['from_this_person_to_poi_ratio'] = 0\n",
    "    data_dict_fe[name]['from_poi_to_this_person_ratio'] = 0\n",
    "    if item['from_messages'] > 0:\n",
    "        data_dict_fe[name]['from_this_person_to_poi_ratio'] = float(item['from_this_person_to_poi']) / float(item['from_messages'])\n",
    "    if item['to_messages'] > 0:\n",
    "        data_dict_fe[name]['from_poi_to_this_person_ratio'] = float(item['from_poi_to_this_person']) / float(item['to_messages'])\n",
    "\n",
    "df_fe = to_pandas(data_dict_fe)\n",
    "print \"From This Person to POI Ratio\"\n",
    "print df_fe['from_this_person_to_poi_ratio'].describe()\n",
    "print df_fe.ix[:,['poi', 'from_this_person_to_poi_ratio', 'from_this_person_to_poi', 'from_messages']].head(5)\n",
    "\n",
    "print \"\\n\"\n",
    "print \"From POI to This Person Ratio\"\n",
    "print df_fe['from_poi_to_this_person_ratio'].describe()\n",
    "print df_fe.ix[:,['poi', 'from_poi_to_this_person_ratio', 'from_poi_to_this_person', 'to_messages']].head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's use them in our prediction model in place of their substances (`from_this_person_to_poi`, `from_messages`, etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('features', FeatureUnion(n_jobs=1,\n",
      "       transformer_list=[('scale', MinMaxScaler(copy=True, feature_range=(0, 1)))],\n",
      "       transformer_weights=None)), ('classify', DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
      "            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n",
      "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=13, splitter='best'))])\n",
      "\tAccuracy: 0.82433\tPrecision: 0.33316\tRecall: 0.31700\tF1: 0.32488\tF2: 0.32011\n",
      "\tTotal predictions: 15000\tTrue positives:  634\tFalse positives: 1269\tFalse negatives: 1366\tTrue negatives: 11731\n",
      "\n"
     ]
    }
   ],
   "source": [
    "features_list_fe = [\n",
    "    'poi',\n",
    "    'bonus',\n",
    "    'salary',\n",
    "    'deferral_payments',\n",
    "    'deferred_income',\n",
    "    'director_fees',\n",
    "    'exercised_stock_options',\n",
    "    'expenses',\n",
    "    'from_poi_to_this_person_ratio',\n",
    "    'from_this_person_to_poi_ratio',\n",
    "    'loan_advances',\n",
    "    'long_term_incentive',\n",
    "    'other',\n",
    "    'restricted_stock',\n",
    "    'restricted_stock_deferred',\n",
    "    'salary',\n",
    "    'shared_receipt_with_poi'\n",
    "]\n",
    "\n",
    "combined_features_fe = FeatureUnion([\n",
    "        ('scale', MinMaxScaler())\n",
    "    ])\n",
    "\n",
    "estimators_fe = [\n",
    "    ('features', combined_features_fe),\n",
    "    ('classify', DecisionTreeClassifier(random_state=random))\n",
    "]\n",
    "\n",
    "# Rebuilding the classifier\n",
    "pclf_fe = Pipeline(estimators_fe)\n",
    "\n",
    "test_classifier(pclf_fe, data_dict_fe, features_list_fe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alright, seems like it does improve our prediction model even further."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importance rank of all my features\n",
    "Below is a list of feature ranks, ordered by best to worst."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "[ 5  8 15 10  7 11 12  0 14 13  9  6  4  3  2  1]\n",
      "1. exercised_stock_options (0.40)\n",
      "2. from_this_person_to_poi_ratio (0.13)\n",
      "3. shared_receipt_with_poi (0.13)\n",
      "4. long_term_incentive (0.12)\n",
      "5. from_poi_to_this_person_ratio (0.11)\n",
      "6. other (0.07)\n",
      "7. restricted_stock (0.03)\n",
      "8. bonus (0.01)\n",
      "9. salary (0.00)\n",
      "10. restricted_stock_deferred (0.00)\n",
      "11. loan_advances (0.00)\n",
      "12. expenses (0.00)\n",
      "13. director_fees (0.00)\n",
      "14. deferred_income (0.00)\n",
      "15. deferral_payments (0.00)\n",
      "16. salary (0.00)\n"
     ]
    }
   ],
   "source": [
    "importances = pclf_fe.steps[-1][1].feature_importances_\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "# Print the feature ranking\n",
    "print(\"Feature ranking:\")\n",
    "print indices\n",
    "\n",
    "for f in range(16):\n",
    "    # [1:] is important since the first item is \"poi\"!\n",
    "    print(\"%d. %s (%0.2f)\" % (f + 1, features_list_fe[1:][indices[f]], importances[indices[f]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like our ratio features ranked quite high in their importance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Is not including the substances of our new features better for our model?\n",
    "Out of curiosity, let's try including all the substances into our list of features and see if that improves or degrades our model. Below is the result of an exactly similar code as above, but with `from_poi_to_this_person`, `from_this_person_to_poi`, `to_messages`, `from_messages` included in our features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('features', FeatureUnion(n_jobs=1,\n",
      "       transformer_list=[('scale', MinMaxScaler(copy=True, feature_range=(0, 1)))],\n",
      "       transformer_weights=None)), ('classify', DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
      "            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n",
      "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=13, splitter='best'))])\n",
      "\tAccuracy: 0.81827\tPrecision: 0.30547\tRecall: 0.28500\tF1: 0.29488\tF2: 0.28887\n",
      "\tTotal predictions: 15000\tTrue positives:  570\tFalse positives: 1296\tFalse negatives: 1430\tTrue negatives: 11704\n",
      "\n"
     ]
    }
   ],
   "source": [
    "hide_me\n",
    "features_list_fe2 = [\n",
    "    'poi',\n",
    "    'bonus',\n",
    "    'salary',\n",
    "    'deferral_payments',\n",
    "    'deferred_income',\n",
    "    'director_fees',\n",
    "    'exercised_stock_options',\n",
    "    'expenses',\n",
    "    'from_poi_to_this_person_ratio',\n",
    "    'from_this_person_to_poi_ratio',\n",
    "    'from_poi_to_this_person',\n",
    "    'from_this_person_to_poi',\n",
    "    'from_messages',\n",
    "    'to_messages',\n",
    "    'loan_advances',\n",
    "    'long_term_incentive',\n",
    "    'other',\n",
    "    'restricted_stock',\n",
    "    'restricted_stock_deferred',\n",
    "    'salary',\n",
    "    'shared_receipt_with_poi'\n",
    "]\n",
    "\n",
    "combined_features_fe2 = FeatureUnion([\n",
    "        ('scale', MinMaxScaler())\n",
    "    ])\n",
    "\n",
    "estimators_fe2 = [\n",
    "    ('features', combined_features_fe2),\n",
    "    ('classify', DecisionTreeClassifier(random_state=random))\n",
    "]\n",
    "\n",
    "# Rebuilding the classifier\n",
    "pclf_fe2 = Pipeline(estimators_fe2)\n",
    "\n",
    "test_classifier(pclf_fe2, data_dict_fe, features_list_fe2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature ranking:\n",
      "[ 5 19  8 14 16  9 13 12 11 10 18 15  7  6 17  4  3  2  1  0]\n",
      "1. exercised_stock_options (0.40)\n",
      "2. shared_receipt_with_poi (0.19)\n",
      "3. from_this_person_to_poi_ratio (0.13)\n",
      "4. long_term_incentive (0.12)\n",
      "5. restricted_stock (0.09)\n",
      "6. from_poi_to_this_person (0.07)\n",
      "7. loan_advances (0.00)\n",
      "8. to_messages (0.00)\n",
      "9. from_messages (0.00)\n",
      "10. from_this_person_to_poi (0.00)\n",
      "11. salary (0.00)\n",
      "12. other (0.00)\n",
      "13. from_poi_to_this_person_ratio (0.00)\n",
      "14. expenses (0.00)\n",
      "15. restricted_stock_deferred (0.00)\n",
      "16. director_fees (0.00)\n",
      "17. deferred_income (0.00)\n",
      "18. deferral_payments (0.00)\n",
      "19. salary (0.00)\n",
      "20. bonus (0.00)\n"
     ]
    }
   ],
   "source": [
    "hide_me\n",
    "importances = pclf_fe2.steps[-1][1].feature_importances_\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "# Print the feature ranking\n",
    "print(\"Feature ranking:\")\n",
    "print indices\n",
    "\n",
    "for f in range(20):\n",
    "    # [1:] is important since the first item is \"poi\"!\n",
    "    print(\"%d. %s (%0.2f)\" % (f + 1, features_list_fe2[1:][indices[f]], importances[indices[f]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusion: **Yep, it is better to remove the substances.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Text Learning From Emails\n",
    "We will now load all emails of our samples and see if we can improve the prediction with them.\n",
    "\n",
    "### Add more features to our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 21.6 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "hide_me\n",
    "import os\n",
    "import sys\n",
    "sys.path.append(\"../tools/\")\n",
    "from parse_out_email_text import parseOutText\n",
    "\n",
    "dirpath = 'emails_by_address/'\n",
    "filenames = next(os.walk(dirpath))[2]\n",
    "\n",
    "word_data = []\n",
    "key_data = []\n",
    "email_types = []\n",
    "poi_data = []\n",
    "# temp_counter = 0\n",
    "all_words_path = 'D:\\\\Projects\\\\data_science\\\\nanodegree_data_analyst\\\\intro_to_ml\\\\enron_emails_all_words.pkl'\n",
    "\n",
    "if (os.path.isfile(all_words_path)):\n",
    "    all_words = cPickle.load(open(all_words_path, \"r\"))\n",
    "    word_data, key_data, email_types, poi_data = zip(*all_words)\n",
    "else:\n",
    "    for key, value in data_dict_fe.items():\n",
    "        if value['email_address'] != 0:\n",
    "            paths = [\n",
    "                dirpath + 'from_' + value['email_address'] + '.txt',\n",
    "                dirpath + 'to_' + value['email_address'] + '.txt',\n",
    "            ]\n",
    "            for idx, path in enumerate(paths):\n",
    "                if os.path.isfile(path):\n",
    "                    print \"reading\", path, '...'\n",
    "                    email_list = open(path, 'r')\n",
    "                    for email_path in email_list:\n",
    "                        ### only look at first 100 emails when developing\n",
    "                        ### once everything is working, remove this line to run over full dataset\n",
    "                        # temp_counter += 1\n",
    "                        # if temp_counter < 100:\n",
    "                        email_path = '..' + email_path[19:-2]\n",
    "                        if os.path.isfile(email_path):\n",
    "                            email = open(email_path, 'r')\n",
    "                            text = parseOutText(email)\n",
    "                            word_data.append(text)\n",
    "                            key_data.append(key)\n",
    "                            poi_data.append(data_dict_fe[key]['poi'])\n",
    "                            if idx == 0:\n",
    "                                email_types.append('from')\n",
    "                            else:\n",
    "                                email_types.append('to')\n",
    "    all_words = zip(word_data, key_data, email_types, poi_data)\n",
    "    cPickle.dump(all_words, open(all_words_path, \"w\") )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(u'skeannsf dear all further to the prc committe meet pleas find attach the first draft of the peer group map by function it was decid that each member would review the propos to move from 4 peer group to 3 for mid year the attach was complet some week ago by the hr lead in your busi unit and is base on a mckinsey studi request by jeff skill and steve kean under your review of the attach inform pleas focus on the final two page that show the strawman on how the function fell out under the propos peer group structur i have copi in the hr lead for your busi area they have been instrument in complet the map and will meet with you to provid ani specif inform you requir concern placement with your busi area i would point out that there doe appear to be some inconsist in function placement within the peer group for some busi unit it will be our primari focus at the next meet to resolv these issu your assist have been contact regard the time and date of our next meet under separ cover for our london colleagu we will aim for a morn meet david oxley',\n",
       " 'HAEDICKE MARK E',\n",
       " 'to',\n",
       " False)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_words[10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1min 35s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "### Initial testing on TfidfVectorizer. We want to know the quality \n",
    "### when using ONLY bag of words as features.\n",
    "### Later below we will try combining this with our previous features\n",
    "### (which unfortunately requires us to vectorize again but on full dataset)\n",
    "\n",
    "from sklearn import cross_validation\n",
    "words_train, words_test, labels_train, labels_test = cross_validation.train_test_split(word_data, poi_data, test_size=0.1, random_state=random)\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "vectorizer = TfidfVectorizer(sublinear_tf=True, max_df=0.8, min_df=0.1,\n",
    "                             max_features=100, stop_words='english')\n",
    "import cProfile\n",
    "\n",
    "# Use cProfile if you need detailed time analysis\n",
    "# cProfile.run('features_train = vectorizer.fit_transform(words_train)')\n",
    "# cProfile.run('features_test  = vectorizer.transform(words_test)')\n",
    "features_train = vectorizer.fit_transform(words_train)\n",
    "features_test  = vectorizer.transform(words_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(221303, 100)\n"
     ]
    }
   ],
   "source": [
    "print features_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24590, 100)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[u'2001', u'addit', u'ani', u'ask', u'attach', u'avail', u'busi', u'california', u'cc', u'chang', u'comment', u'committe', u'compani', u'contact', u'continu', u'current', u'date', u'david', u'day', u'develop', u'direct', u'discuss', u'email', u'energi', u'enron', u'execut', u'follow', u'forward', u'friday', u'gas', u'group', u'help', u'includ', u'inform', u'issu', u'jeff', u'john', u'just', u'know', u'let', u'like', u'list', u'look', u'make', u'manag', u'mark', u'market', u'meet', u'messag']\n"
     ]
    }
   ],
   "source": [
    "fnames = vectorizer.get_feature_names()\n",
    "print fnames[1:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "print len(fnames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of top 5 word scores of METTS MARK's first message:\n",
      "comment - 0.40\n",
      "respons - 0.39\n",
      "review - 0.38\n",
      "john - 0.37\n",
      "includ - 0.34\n",
      "\n",
      "List of top 5 word scores of LAY KENNETH L's first message:\n",
      "work - 1.00\n",
      "2000 - 0.00\n",
      "2001 - 0.00\n",
      "addit - 0.00\n",
      "ani - 0.00\n"
     ]
    }
   ],
   "source": [
    "hide_me\n",
    "def top_5_word_scores(key):\n",
    "    idx = key_data.index(key)\n",
    "    # Not the most straightforward code but this is how to convert a row\n",
    "    # of sparse matrix into a list\n",
    "    row = features_train[idx].todense()[0].tolist()[0]\n",
    "\n",
    "    word_scores = zip(range(0, features_train.shape[1]), row)\n",
    "    sorted_scores = sorted(word_scores, key=lambda t: t[1] * -1)[:5]\n",
    "    #  [(129753, 0.3526242375705134), (117135, 0.34794669254575034), (170214, 0.3069845443039424), (117128, 0.22619103462072823), (91625, 0.2245133019602352)]\n",
    "    print(\"List of top 5 word scores of %s's first message:\" % key_data[idx])\n",
    "    for score in sorted_scores:\n",
    "        print(\"%s - %0.2f\" % (fnames[score[0]], score[1]))\n",
    "        \n",
    "top_5_word_scores('METTS MARK')\n",
    "print \"\"\n",
    "top_5_word_scores('LAY KENNETH L')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1min 18s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from sklearn import tree\n",
    "clf = tree.DecisionTreeClassifier()\n",
    "\n",
    "# cProfile.run('clf.fit(features_train, labels_train)')\n",
    "clf.fit(features_train, labels_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And the quality metrics as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
      "            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n",
      "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "            random_state=None, splitter='best')\n",
      "\tAccuracy: 0.85571\tPrecision: 0.64680\tRecall: 0.25672\tF1: 0.36756\tF2: 0.29194\n",
      "Wall time: 47 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "hide_me\n",
    "\n",
    "PERF_FORMAT_STRING = \"\\\n",
    "\\tAccuracy: {:>0.{display_precision}f}\\tPrecision: {:>0.{display_precision}f}\\t\\\n",
    "Recall: {:>0.{display_precision}f}\\tF1: {:>0.{display_precision}f}\\tF2: {:>0.{display_precision}f}\"\n",
    "\n",
    "\n",
    "pred = clf.predict(features_test)\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "\n",
    "precision, recall, fscore, support = precision_recall_fscore_support(labels_test, pred, average='binary')\n",
    "f2 = (1+2.0*2.0) * precision*recall/(4*precision + recall)\n",
    "\n",
    "accuracy = clf.score(features_test, labels_test)\n",
    "print clf\n",
    "print PERF_FORMAT_STRING.format(accuracy, precision, recall, fscore, f2, display_precision = 5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks promising. We get higher F1 and F2 scores when predicting POI based on the emails they sent and received."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### Insert word data into our latest dataset\n",
    "\n",
    "data_dict_final = copy.deepcopy(data_dict_fe)\n",
    "\n",
    "email_messages = []\n",
    "for idx, message in enumerate(word_data):\n",
    "    key = key_data[idx]\n",
    "    if email_types[idx] == 'from':\n",
    "        if 'from_messages_texts' not in data_dict_final[key].keys():\n",
    "            data_dict_final[key]['from_messages_texts'] = []\n",
    "        data_dict_final[key]['from_messages_texts'].append(message)\n",
    "    elif email_types[idx] == 'to':\n",
    "        if 'to_messages_texts' not in data_dict_final[key].keys():\n",
    "            data_dict_final[key]['to_messages_texts'] = []\n",
    "        data_dict_final[key]['to_messages_texts'].append(message)\n",
    "\n",
    "# For people without email messages:\n",
    "for key, value in data_dict_final.items():\n",
    "    if 'from_messages_texts' not in value.keys():\n",
    "        data_dict_final[key]['from_messages_texts'] = []\n",
    "    if 'to_messages_texts' not in value.keys():\n",
    "        data_dict_final[key]['to_messages_texts'] = []\n",
    "\n",
    "features_list_final = copy.deepcopy(features_list_fe)\n",
    "features_list_final.append('to_messages_texts')\n",
    "features_list_final.append('from_messages_texts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fit_transform\n",
      "[[ 0.5  0.5  0.5  0.5]]\n",
      "[u'document', u'is', u'test', u'this']\n",
      "fit_transform\n",
      "[[ 0.4472136  0.4472136  0.4472136  0.4472136  0.4472136]]\n",
      "[u'day', u'is', u'lovely', u'this', u'what']\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Number of labels=7 does not match number of samples=1",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-92-6c58076e2b7a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    101\u001b[0m     \u001b[0ml\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    102\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 103\u001b[1;33m \u001b[0mtest_pipeline\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata_dict_final\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeatures_list_final\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrandom\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    104\u001b[0m \u001b[1;31m# test_classifier(pipeline, data_dict_final, features_list_final)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-92-6c58076e2b7a>\u001b[0m in \u001b[0;36mtest_pipeline\u001b[1;34m(clf, data_dict, features_list, random)\u001b[0m\n\u001b[0;32m     98\u001b[0m     \u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtargetFeatureSplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     99\u001b[0m     \u001b[0mf_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ml_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ml_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcross_validation\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain_test_split\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.95\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mrandom\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 100\u001b[1;33m     \u001b[0mpredictions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ml_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    101\u001b[0m     \u001b[0ml\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    102\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda\\lib\\site-packages\\sklearn\\pipeline.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m    139\u001b[0m         \"\"\"\n\u001b[0;32m    140\u001b[0m         \u001b[0mXt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfit_params\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_pre_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 141\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    142\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    143\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda\\lib\\site-packages\\sklearn\\tree\\tree.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[0;32m    219\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mn_samples\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    220\u001b[0m             raise ValueError(\"Number of labels=%d does not match \"\n\u001b[1;32m--> 221\u001b[1;33m                              \"number of samples=%d\" % (len(y), n_samples))\n\u001b[0m\u001b[0;32m    222\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmin_samples_split\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    223\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"min_samples_split must be greater than zero.\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Number of labels=7 does not match number of samples=1"
     ]
    }
   ],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "class FeaturesCombiner(BaseEstimator, TransformerMixin):\n",
    "    def fit(self, x, y=None):\n",
    "        return self\n",
    "    \n",
    "    def transform(self, x):\n",
    "        combined_features = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 5.0, 5.0])\n",
    "        return combined_features\n",
    "\n",
    "class MyTfidfVectorizer(TfidfVectorizer):\n",
    "    def __init__(self, input='content', encoding='utf-8',\n",
    "                 decode_error='strict', strip_accents=None, lowercase=True,\n",
    "                 preprocessor=None, tokenizer=None, analyzer='word',\n",
    "                 stop_words=None, token_pattern=r\"(?u)\\b\\w\\w+\\b\",\n",
    "                 ngram_range=(1, 1), max_df=1.0, min_df=1,\n",
    "                 max_features=None, vocabulary=None, binary=False,\n",
    "                 dtype=np.int64, norm='l2', use_idf=True, smooth_idf=True,\n",
    "                 sublinear_tf=False, feature_id='from'):\n",
    "        self.feature_id = feature_id\n",
    "        super(MyTfidfVectorizer, self).__init__(\n",
    "            input=input, encoding=encoding, decode_error=decode_error,\n",
    "            strip_accents=strip_accents, lowercase=lowercase,\n",
    "            preprocessor=preprocessor, tokenizer=tokenizer, analyzer=analyzer,\n",
    "            stop_words=stop_words, token_pattern=token_pattern,\n",
    "            ngram_range=ngram_range, max_df=max_df, min_df=min_df,\n",
    "            max_features=max_features, vocabulary=vocabulary, binary=binary,\n",
    "            dtype=dtype)\n",
    "\n",
    "    def fit(self, x, y=None):\n",
    "        documents = self.get_documents_from_data_dict(x)\n",
    "        super(MyTfidfVectorizer, self).fit(documents, y=y)\n",
    "        return self\n",
    "    \n",
    "    def transform(self, data_dict):\n",
    "        documents = self.get_documents_from_data_dict(data_dict)\n",
    "        super(MyTfidfVectorizer, self).transform(documents)\n",
    "        return data_dict\n",
    "    \n",
    "    def fit_transform(self, x, y=None):\n",
    "        print \"fit_transform\"\n",
    "        documents, document_keys = self.get_documents_from_data_dict(x)\n",
    "        transformed_docs = super(MyTfidfVectorizer, self).fit_transform(documents, y=y)\n",
    "#         print transformed_docs.toarray()\n",
    "#         print self.get_feature_names()\n",
    "\n",
    "        return {'x': self.get_feature_names()}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            documents.extend(value[self.feature_id])\n",
    "            document_keys.extend([idx] * len(value[self.feature_id]))\n",
    "        # In here we will end up with:\n",
    "        # - documents: a list of all email messages of everyone.\n",
    "        # - document_keys: a list of ids each email message belong to.\n",
    "        print 'numdocs', len(documents)\n",
    "        print 'numkeys', len(document_keys)\n",
    "        return (documents, document_keys)\n",
    "    \n",
    "pipeline = Pipeline([\n",
    "    ('union', FeatureUnion(\n",
    "        transformer_list=[\n",
    "            # Pipeline for standard bag-of-words model for \"to\" emails\n",
    "            ('email_to_bow', Pipeline([\n",
    "                ('tfidf', MyTfidfVectorizer(feature_id=features_list_final.index('to_messages_texts')))                \n",
    "            ])),\n",
    "            # Pipeline for standard bag-of-words model for \"from\" emails\n",
    "            ('email_from_bow', Pipeline([\n",
    "                ('tfidf', MyTfidfVectorizer(feature_id=features_list_final.index('from_messages_texts')))\n",
    "            ]))\n",
    "        ]\n",
    "    )),\n",
    "    # At this point, the dictionaries returned from two transformers above\n",
    "    # are combined into a list. In this features_combiner step we combine\n",
    "    # those two list items into a dictionary, and then into a numpy array\n",
    "    # we can use in scaler and classifier steps.\n",
    "        \n",
    "    ('features_combiner', FeaturesCombiner()),\n",
    "    ('scaler', MinMaxScaler()),\n",
    "    ('classifier', DecisionTreeClassifier(random_state=random)),\n",
    "])\n",
    "\n",
    "### Used in development of feature_format to reimport that file.\n",
    "# import feature_format\n",
    "# feature_format = reload(sys.modules['feature_format'])\n",
    "# featureFormat = feature_format.featureFormat\n",
    "\n",
    "from sklearn import cross_validation\n",
    "\n",
    "# test if the function works by using few data.\n",
    "def test_pipeline(clf, data_dict, features_list, random):\n",
    "    # I had to update the function featureFormat to accept list in their values.\n",
    "    data = featureFormat(data_dict, features_list, sort_keys = True, to_np_array = False)\n",
    "    labels, features = targetFeatureSplit(data)\n",
    "    f_train, f_test, l_train, l_test = cross_validation.train_test_split(features, labels, test_size=0.95, random_state=random)\n",
    "    predictions = clf.fit(f_train, l_train)\n",
    "    l = clf.predict(f_train)\n",
    "    \n",
    "test_pipeline(pipeline, data_dict_final, features_list_final, random)\n",
    "# test_classifier(pipeline, data_dict_final, features_list_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "hide_me\n",
    "importances = clf.feature_importances_\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "# Print the feature ranking\n",
    "print(\"Feature ranking:\")\n",
    "print indices\n",
    "\n",
    "for f in range(20):\n",
    "    # [1:] is important since the first item is \"poi\"!\n",
    "    print(\"%d. %s (%0.2f)\" % (f + 1, vectorizer.get_feature_names()[indices[f]], importances[indices[f]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pick An Algorithm\n",
    "Now that we have optimized our parameters, It is time to do the final step, to pick a classifier algorithm and later to tune it.\n",
    "\n",
    "### Cross Validation\n",
    "\n",
    "\n",
    "### Spot Checking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### Tune the estimators\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "\n",
    "from sklearn.cross_validation import StratifiedShuffleSplit\n",
    "data_fe = featureFormat(data_dict_fe, features_list_fe, sort_keys = True)\n",
    "labels, feature_values = targetFeatureSplit(data_fe)\n",
    "folds = 100\n",
    "cv = StratifiedShuffleSplit(\n",
    "     labels, folds, random_state=random)\n",
    "\n",
    "# from sklearn.cross_validation import train_test_split\n",
    "# feature_values, feature_values_test, labels, labels_test = train_test_split(\n",
    "#     feature_values, labels, test_size=0, random_state=random)\n",
    "# cv = None\n",
    "\n",
    "# Rebuilding the classifier without imputer\n",
    "combined_features = FeatureUnion([\n",
    "        ('scale', MinMaxScaler())\n",
    "    ])\n",
    "\n",
    "estimators = [\n",
    "    ('features', combined_features),\n",
    "    ('classify', AdaBoostClassifier(random_state=random))\n",
    "]\n",
    "\n",
    "pclf_final = Pipeline(estimators)\n",
    "\n",
    "parameters = [\n",
    "    {\n",
    "        'classify__base_estimator': [DecisionTreeClassifier(), RandomForestClassifier()],\n",
    "        'classify__n_estimators': [1, 20, 50, 60]\n",
    "    }\n",
    "]\n",
    "grid = GridSearchCV(pclf_final, parameters, cv = cv, scoring='f1', verbose=10)\n",
    "grid.fit(feature_values, labels)\n",
    "\n",
    "print(\"The best parameters are %s with a score of %0.2f\"\n",
    "      % (grid.best_params_, grid.best_score_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pick and Tune The Algorithm: Explained\n",
    "In the code above, I used GridSearchCV to try out myriad number of combinations of the classifiers' tuning options and algorithms. We then use the best parameters in our final classifier `clf`.\n",
    "\n",
    "### Completing Missing Values i.e. Imputation\n",
    "There are several missing values within our dataset. So far we managed by replacing them with 0, but is that the most optimal to do it? With `Imputer` class, python completes the missing values with `median`; In tuning process, it tried `mean`, `median`, and `most_frequent` values and found that `median` was the most optimal.\n",
    "\n",
    "### Feature Scaling\n",
    "All features were scaled with `MinMaxScaler` algorithm available in `sklearn` before being used in a model.\n",
    "\n",
    "### Reduce Dimensionality (with PCA)\n",
    "Reduce the number of features we use in our model with PCA algorithm. We try keeping various number of components and see which one gives out the best value.\n",
    "\n",
    "### AdaBoost Tuning\n",
    "Often referred as \"the best out of the box\", AdaBoost improves the output of other weak learners by combining them into a weighted sum that represents the final output of the boosted classifier. When used with decision tree learning, information gathered at each stage of the AdaBoost algorithm about the relative 'hardness' of each training sample is fed into the tree growing algorithm such that later trees tend to focus on harder to classify examples. (excerpt from [Wikipedia](https://en.wikipedia.org/wiki/AdaBoost))\n",
    "\n",
    "In our system, we"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print grid.best_params_\n",
    "clf = pclf.set_params(**grid.best_params_)\n",
    "test_classifier(clf, my_dataset, features_list)\n",
    "\n",
    "### Dump your classifier, dataset, and features_list so \n",
    "### anyone can run/check your results.\n",
    "\n",
    "dump_classifier_and_data(clf, my_dataset, features_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "- A Few Useful Things to Know about Machine Learning - Pedro Domingos, Department of Computer Science and Engineering, University of Washington\n",
    "- Feature Engineering Intro: http://machinelearningmastery.com/discover-feature-engineering-how-to-engineer-features-and-how-to-get-good-at-it/\n",
    "- Feature Selection Intro: http://machinelearningmastery.com/an-introduction-to-feature-selection/\n",
    "- Example of performance improvement by Feature Engineering: [Feature Engineering and Classifier Ensemble for KDD Cup 2010](http://pslcdatashop.org/KDDCup/workshop/papers/kdd2010ntu.pdf)\n",
    "- Learning about Kernels: https://charlesmartin14.wordpress.com/2012/02/06/kernels_part_1/ and http://www.quora.com/How-does-one-decide-on-which-kernel-to-choose-for-an-SVM-RBF-vs-linear-vs-poly-kernel\n",
    "- Another good summary of different machine learning techniques and tips: http://blog.bigml.com/2013/02/21/everything-you-wanted-to-know-about-machine-learning-but-were-too-afraid-to-ask-part-two/\n",
    "- Understanding AdaBoost algorithm: https://en.wikipedia.org/wiki/AdaBoost\n",
    "- Combining multiple classifiers?: http://sebastianraschka.com/Articles/2014_ensemble_classifier.html\n",
    "- How to get importance rank in Decision Tree: http://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html\n",
    "- Evaluation metrix in Machine Learning http://machinelearningmastery.com/how-to-evaluate-machine-learning-algorithms/\n",
    "- Good intro on TFIDF: http://www.markhneedham.com/blog/2015/02/15/pythonscikit-learn-calculating-tfidf-on-how-i-met-your-mother-transcripts/\n",
    "- What is Sparse Matrix? (used in TFIDF): https://en.wikipedia.org/wiki/Sparse_matrix\n",
    "- Comparison of several ML Algorithms' computational performance: http://ccr.sigcomm.org/online/files/p7-williams.pdf\n",
    "- Combining Pipelines and Feature Unions: http://zacstewart.com/2014/08/05/pipelines-of-featureunions-of-pipelines.html\n",
    "- And tons of other resources.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
